a:5:{s:1:"d";a:163:{s:48:"admincp.component_controller_controller_apps_end";s:332:"foreach ($allApps as $key => $app) {
    if ($app instanceof Core\App\Objects) {
        if ($app->id == 'PHPfox_Core') {
            unset($allApps[$key]);
        }
    }
} 
 foreach ($allApps as $key => $app) {
	if ($app instanceof Core\App\Objects) {
		if ($app->id == 'PHPfox_Flavors') {
			unset($allApps[$key]);
		}
	}
} 
 ";s:14:"job_queue_init";s:3051:"\Core\Queue\Manager::instance()
	->addHandler('core_get_facebook_images', '\Apps\PHPfox_Core\Job\GetFacebookImages')
	->addHandler('core_clone_phpfox_tag', '\Apps\PHPfox_Core\Job\ClonePhpfoxTag')
	->addHandler('core_transfer_asset_files', '\Apps\PHPfox_Core\Job\TransferAssetFiles')
	->addHandler('core_storage_transfer_files', '\Apps\PHPfox_Core\Job\TransferStorageFiles')
	->addHandler('core_storage_transfer_files_update_db', '\Apps\PHPfox_Core\Job\TransferStorageFilesUpdateDB')
	->addHandler('core_storage_transfer_files_remove_local', '\Apps\PHPfox_Core\Job\TransferStorageFilesRemoveLocal')
	->addHandler('core_storage_transfer_files_update_db_execute', '\Apps\PHPfox_Core\Job\TransferStorageFilesUpdateDBExecute')
; 
 \Core\Queue\Manager::instance()->addHandler('core_newsletter_send_email_users',
    '\Apps\Core_Newsletter\Job\SendEmailUsers'); 
 \Core\Queue\Manager::instance()->addHandler('pages_generate_missing_thumbnails',
    '\Apps\Core_Pages\Job\GenerateMissingThumbnails'); 
 \Core\Queue\Manager::instance()
    ->addHandler('event_convert_old_location', '\Apps\Core_Events\Job\ConvertOldLocation')
    ->addHandler('event_add_notification_for_post_status_in_event', '\Apps\Core_Events\Job\AddNotificationForPostStatusInEvent')
    ->addHandler('event_add_notification_when_change_event_content', '\Apps\Core_Events\Job\AddNotificationWhenChangeEventContent'); 
 \Core\Queue\Manager::instance()
    ->addHandler('groups_member_join_notifications', '\Apps\PHPfox_Groups\Job\SendMemberJoinNotification')
    ->addHandler('groups_member_notifications', '\Apps\PHPfox_Groups\Job\SendMemberNotification')
    ->addHandler('groups_convert_old_group', '\Apps\PHPfox_Groups\Job\ConvertOldGroups'); 
 \Core\Queue\Manager::instance()->addHandler('core_activitypoint_update_points',
    '\Apps\Core_Activity_Points\Job\UpdatePoints'); 
 \Core\Queue\Manager::instance()->addHandler('videos_ffmpeg_encode', '\Apps\PHPfox_Videos\Job\Encode');
\Core\Queue\Manager::instance()->addHandler('videos_convert_old_videos', '\Apps\PHPfox_Videos\Job\ConvertOldVideos'); 
 \Core\Queue\Manager::instance()->addHandler('subscribe_process_active_subscription_after_delete_package', '\Apps\Core_Subscriptions\Job\ProcessActiveSubscriptionAfterDeletePackage'); 
 \Core\Queue\Manager::instance()->addHandler('marketplace_convert_old_location', '\Apps\Core_Marketplace\Job\ConvertOldLocation'); 
 \Core\Queue\Manager::instance()->addHandler('mobile_push_notification', '\Apps\Core_MobileApi\Job\PushNotification'); 
 \Core\Queue\Manager::instance()
    ->addHandler('core_email_queue', 'Core_Job_MailQueue')
    ->addHandler('core_phone_queue', 'Core_Job_SmsQueue')
    ->addHandler('core_schedule_queue', 'Core_Job_ScheduleQueue'); 
 \Core\Queue\Manager::instance()->addHandler('item_liked', 'Like_Job_ItemLiked'); 
 defined('PHPFOX') or exit('NO DICE!');

\Core\Queue\Manager::instance()->addHandler('user_inactive_mailing_job', 'User_Job_MailingInactive');
\Core\Queue\Manager::instance()->addHandler('user_import_user', 'User_Job_ImportUser'); 
 ";s:13:"bundle__start";s:6364:"$aBundleScripts[] = [
    'autoload.js'  => 'app_core-flavors',
    'autoload.css' => 'app_core-flavors',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-photos',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-comments'
]; 
 $aBundleScripts[] = [
    'autoload.js'  => 'app_core-announcement',
]; 
 $aBundleScripts[] = [
    'autoload.css' => 'app_core-poke',
]; 
 $aBundleScripts[] = [
    'autoload.css' => 'app_core-pages',
    'autoload.js' => 'app_core-pages',
]; 
 $aBundleScripts[] = [
    'autoload.css' => 'app_core-twemoji-awesome',
    'autoload.js' => 'app_core-twemoji-awesome',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-music',
]; 
 $aBundleScripts[] = [
    'autoload.css' => 'app_core-facebook',
    'autoload.js' => 'app_core-facebook',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-captcha',
]; 
 $aBundleScripts[] = [
//    'autoload.css' => 'app_core-events',
    'autoload.js' => 'app_core-events',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-groups',
    'autoload.css' => 'app_core-groups',
]; 
 $aBundleScripts[] = [
//    'autoload.css' => 'app_core-egift',
    'autoload.js' => 'app_core-egift',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-messages',
    'autoload.css' => 'app_core-messages',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-activity-points',
    'autoload.css' => 'app_core-activity-points',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-blogs',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-quizzes',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-polls',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-forums',
]; 
 $aBundleScripts[] = [
    'autoload.css' => 'app_core-CKEditor',
    'autoload.js' => 'app_core-CKEditor',
]; 
 $aBundleScripts[] = [
    'autoload.css' => 'app_core-videos',
    'autoload.js' => 'app_core-videos',
]; 
 $aBundleScripts[] = [
    'autoload.js'         => 'app_core-im',
    'im-libraries.min.js' => 'app_core-im',
    'autoload.css'        => 'app_core-im',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-subscriptions',
    'autoload.css' => 'app_core-subscriptions',
]; 
 $aBundleScripts[] = [
    'autoload.css' => 'app_core-better-ads',
    'autoload.js' => 'app_core-better-ads',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-marketplace',
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-shoutbox',
]; 
 $aBundleScripts[] = [
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_p-saved-items'
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_p-reaction'
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_p-status-background'
]; 
 $aBundleScripts[] = [
    'autoload.js' => 'app_core-mobile-api'
]; 
 $aBundleScripts[] = [
    'autoload.js'  => 'flavor',
    'autoload.css' => 'flavor',
];

$aBundleScripts[] = [
    'autoload.js' => 'flavors_bootstrap',
]; 
 array_unshift($aBundleScripts, [
    'icofont.css'                                         => 'style_css',
    'font-awesome/css/font-awesome.min.css'               => 'style_css',
    'bootstrap-tokenfield.min.css'                        => 'style_css',
    'bootstrap.css'                                       => 'flavor_bootstrap',
    'boot.css'                                            => 'flavor_boot',
    'jquery.mCustomScrollbar.min.css'                     => 'style_css',
    'owl_carousel/owl.carousel.min.css'                   => 'style_css',
    'owl_carousel/owl.theme.default.min.css'              => 'style_css',
    'selectize.css'                                       => 'style_css',
    'asBreadcrumbs.min.css'                               => 'style_css',
    'jquery/jquery.js'                                    => 'static_script',
    'jquery/ui.js'                                        => 'static_script',
    'jquery/plugin/jquery.nanoscroller.min.js'            => 'static_script',
    'bootstrap.js'                                        => 'static_script',
    'common.js'                                           => 'static_script',
    'main.js'                                             => 'static_script',
    'ajax.js'                                             => 'static_script',
    'thickbox/thickbox.js'                                => 'static_script',
    'search.js'                                           => 'module_friend',
    'progress.js'                                         => 'static_script',
    'nprogress.js'                                        => 'static_script',
    'quick_edit.js'                                       => 'static_script',
    'feed.js'                                             => 'module_feed',
    'exif.js'                                             => 'static_script',
    'dropzone.js'                                         => 'static_script',
    'jquery/plugin/bootstrap-tokenfield.min.js'           => 'static_script',
    'register.js'                                         => 'module_user',
    'gender.js'                                           => 'module_user',
    'gmap.js'                                             => 'module_core',
    'jquery/plugin/jquery.mCustomScrollbar.concat.min.js' => 'static_script',
    'jquery/plugin/jquery.highlightFade.js'               => 'static_script',
    'jquery/plugin/jquery.scrollTo.js'                    => 'static_script',
    'user_info.js'                                        => 'static_script',
    'editor.js'                                           => 'static_script',
    'wysiwyg/default/core.js'                             => 'static_script',
    'country.js'                                          => 'module_core',
    'owl_carousel/owl.carousel.min.js'                    => 'static_script',
    'jquery-asBreadcrumbs.js'                             => 'static_script',
    'masonry/masonry.min.js'                              => 'static_script',
    'selectize/selectize.min.js'                          => 'static_script',
]); 
 $aBundleScripts[] = [
    'tag-friends.js' => 'module_feed',
    'places.js' => 'module_feed',
]; 
 ;
$aBundleScripts[] = [
    'update.js' => 'module_notification',
]; 
 $aBundleScripts[] = [
    'main.js'   => 'style_script',
]; 
 $aBundleScripts[] = [
    'browse.js' => 'module_user'
]; 
 ";s:42:"core.component_block_template_logo_process";s:108:"$logo = flavor()->active->logo_url();
if ($logo) {
	$this->template()->assign([
		'logo' => $logo
	]);
} 
 ";s:43:"core.component_controller_index_visitor_end";s:421:"$content = '';
$banners = flavor()->active->banners();
if (count($banners)) {
	$usage = request()->get('image');
	if ($usage) {
		$image = [
			'image' => $usage,
			'info' => ''
		];
	} else {
		$total = rand(1, (count($banners)));
		$image = [];
		$cnt = 0;
		foreach ($banners as $banner) {
			$image = [
				'image' => $banner,
				'info' => ''
			];

			$cnt++;
			if ($cnt === $total) {
				break;
			}
		}
	}
} 
 ";s:7:"favicon";s:160:"if(is_object(flavor()->active)) {
    $f = flavor()->active->favicon_url();
    if ($f) {
        $favicon = $f . '?v=' . $oTpl->getStaticVersion();
    }
} 
 ";s:14:"get_controller";s:685:"$controller_name = \Phpfox_Module::instance()->getFullControllerName();
if (isset(flavor()->active->blocks) && isset(flavor()->active->blocks->{$controller_name})) {
	foreach (flavor()->active->blocks->{$controller_name} as $location => $html) {
		foreach ($html as $file) {
			if (substr($file, 0, 1) == '@') {
				new Core\Block($controller_name, $location, function () use ($file) {
					list($namespace, $module, $block) = explode('/', $file);

					\Phpfox::getBlock($module . '.' . $block);

					return @ob_get_clean();
				});

				continue;
			}

			new Core\Block($controller_name, $location, function () use ($file) {
				return view('@Flavor/' . $file);
			});
		}
	}
} 
 ";s:4:"init";s:7202:"if ($forceFlavor = request()->get('force-flavor')) {
    define('PHPFOX_FORCE_FLAVOR_NAME', $forceFlavor);
} 
 defined('PHPFOX') or exit('NO DICE!');
if (!defined('PHPFOX_PAGE_ITEM_TYPE_0')) {
    define('PHPFOX_PAGE_ITEM_TYPE_0', 'pages');
}

$iProfilePageId = Phpfox::getUserBy('profile_page_id');
$bIsLoginAsPage = $iProfilePageId > 0 && Phpfox::getLib('pages.facade')->getPageItemType($iProfilePageId) == 'pages';

if ($bIsLoginAsPage) {
    $aCurrentUser = Phpfox::getUserBy();
    $aPrevUser = Phpfox::getService('pages')->getLastLogin();
    $aCurrentUser['user_group_id'] = $aPrevUser['user_group_id'];
    Phpfox::getService('user.auth')->setUser($aCurrentUser);
} 
 // THIS HOOK USE FOR CHECKING HOSTING SERVICE
$server_chat = setting('pf_im_chat_server', 'nodejs');
$no_host = storage()->get('im_no_host');
if ($server_chat == 'nodejs' && !$no_host) {
    $package_key = 'im_host_package';
    $package = storage()->get($package_key);
    if (request()->get('im-reset-cache')) {
        storage()->del($package_key);
    }
    $package_id = 0;
    if (!$package || !$package->value->package_id || defined('PF_IM_DEBUG_URL')) {
        if (!defined('PHPFOX_TRIAL_MODE') && defined('PHPFOX_LICENSE_ID') && PHPFOX_LICENSE_ID) {
            $home = new Core\Home(PHPFOX_LICENSE_ID, PHPFOX_LICENSE_KEY);
            $hosted = $home->im();
            if (isset($hosted->license_id)) {
                $package_id = $hosted->package_id;
            }
        }
        if ($package_id) {
            storage()->del($package_key);
            storage()->set($package_key, [
                'package_id' => $package_id
            ]);
        }
    } else {
        $package = (array)$package->value;
        $package_id = $package['package_id'];
    }

    if ($package_id && request()->segment(2) != 'hosting') {
        if (!defined('PF_IM_PACKAGE_ID')) {
            define('PF_IM_PACKAGE_ID', $package_id);
        }

        $status_key = 'im_host_status';
        $status = storage()->get($status_key);
        if (PF_IM_PACKAGE_ID && (!$status || $status->value == 'on')) {
            $url = (defined('PF_IM_DEBUG_URL') ? PF_IM_DEBUG_URL : 'https://im-node.phpfox.com/');
            setting()->set('pf_im_node_server', $url);

            // support push notification on Mobile API
            if (Phpfox::isAppActive('Core_MobileApi')) {
                $firebase_updated_key = 'im_host_firebase_updated';
                $firebaseUpdated = storage()->get($firebase_updated_key);
                $firebaseSettings = [
                    'serverKey' => Phpfox::getParam('mobile.mobile_firebase_server_key'),
                    'senderId' => Phpfox::getParam('mobile.mobile_firebase_sender_id'),
                    'host' => Phpfox::getParam('core.host')
                ];
                if (!$firebaseUpdated
                    || $firebaseUpdated->value->serverKey != $firebaseSettings['serverKey']
                    || $firebaseUpdated->value->senderId != $firebaseSettings['senderId']
                    || $firebaseUpdated->value->host != $firebaseSettings['host']) {

                    $ch = curl_init('https://im-node.phpfox.com/socket.io/?' . http_build_query($firebaseSettings));

                    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
                    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($ch, CURLOPT_TIMEOUT, 1000);

                    curl_exec($ch);
                    curl_close($ch);

                    storage()->del($firebase_updated_key);
                    storage()->set($firebase_updated_key, $firebaseSettings);
                }
            }

            // check and update status
            $token = null;
            $token_key = 'im_host_token';
            $tokenData = storage()->get($token_key);
            if ($tokenData) {
                $aTokenData = (array)$tokenData->value;
                if (isset($aTokenData['expired']) && $aTokenData['expired'] > time()) {
                    $token = $aTokenData['token'];
                }
            }
            if (!$token) { // no token or token expired
                $token_checked_time_key = 'im_host_token_checked_time';
                $token_checked_time = storage()->get($token_checked_time_key);
                if (!$token_checked_time || $token_checked_time->value < time() - 3600) {
                    $token = (array)(new Core\Home(PHPFOX_LICENSE_ID, PHPFOX_LICENSE_KEY))->im_token();
                    $isFailed = empty($token['token']);
                    $expired_key = 'im_host_expired';
                    storage()->del($expired_key);
                    storage()->set($expired_key, $isFailed);

                    storage()->del($token_checked_time_key);
                    storage()->set($token_checked_time_key, time());
                    if (!$isFailed) {
                        storage()->del($token_key);
                        storage()->set($token_key, [
                            'token' => $token,
                            'expired' => time() + 86400,
                        ]);
                    }
                }
            }
            $token = (object)$token;
            define('PHPFOX_IM_TOKEN', isset($token->token) ? $token->token : 'failed');
            if (!$status && isset($token->token)) {
                storage()->del($status_key);
                storage()->set($status_key, 'on');
            }
        }
    }
} 
 defined('PHPFOX') or exit('NO DICE!');
$requestObject = Phpfox::getLib('request');
$req1 = $requestObject->get('req1');
$req2 = $requestObject->get('req2');

$apiCondition = ($req1 == 'restful_api') || ($req1 == 'mobile' && $req2 == 'token');
$bLogout = ($req1 == 'logout') || (($req1 == 'user') && ($req2 == 'logout')) || (($req1 == 'subscribe')) || $apiCondition || $requestObject->get('payment-process-executing');
if (!PHPFOX_IS_AJAX && !$bLogout && Phpfox::isAppActive('Core_Subscriptions')) {
    $mRedirectId = Phpfox::getService('subscribe.purchase')->getRedirectId();
    if (is_numeric($mRedirectId) && $mRedirectId > 0) {
        $aPurchase = Phpfox::getService('subscribe.purchase')->getInvoice($mRedirectId, true);
        if ((int)$aPurchase['recurring_period'] > 0) {
            Phpfox_Url::instance()->send('subscribe.renew-method', ['id' => $mRedirectId], _p('subscribe_please_choose_renew_method'));
        } else {
            Phpfox_Url::instance()->send('subscribe.register', ['id' => $mRedirectId], _p('please_complete_your_purchase'));
        }
    }

    $mRedirectId = Phpfox::getService('subscribe.purchase')->isCompleteSubscribe();
    if (is_numeric($mRedirectId) && $mRedirectId > 0) {
        $aPurchase = Phpfox::getService('subscribe.purchase')->getInvoice($mRedirectId, true);
        if ((int)$aPurchase['recurring_period'] > 0) {
            Phpfox_Url::instance()->send('subscribe.renew-method', ['id' => $mRedirectId], _p('subscribe_please_choose_renew_method'));
        } else {
            Phpfox_Url::instance()->send('subscribe.register', ['id' => $mRedirectId], _p('please_complete_your_purchase'));
        }
    }
} 
 ";s:32:"library_template_getlayoutfile_1";s:152:"$path = flavor()->active->path;
$sThemeFile = $path . 'html/' . $sName . PHPFOX_TPL_SUFFIX;
if (file_exists($sThemeFile)) {
	$sFile = $sThemeFile;
} 
 ";s:24:"module_setcontroller_end";s:294:"if ($this->_sController == 'index-member' && Phpfox::isAdmin() && request()->get('preview')) {
	$this->_sController = 'index-visitor';
	\Phpfox::getService('user.auth')->reset();
} 
 if ($oReq->get('req1') == 'hashtag')
{
	$this->_sModule = 'core';
	$this->_sController = 'index-member';
} 
 ";s:18:"run_set_controller";s:317:"if (!defined('PHPFOX_INSTALLER') && !Phpfox::isAdminPanel()) {
	Phpfox_Template::instance()->setStyle([
		'theme_folder_name' => flavor()->active->legacy->theme,
		'style_folder_name' => flavor()->active->legacy->flavor,
		'theme_parent_id' => 0
	]);
} 
 Phpfox::getService('comment')->setCommentLimitSettings(); 
 ";s:22:"template_getfooter_end";s:213:"if (!Phpfox::isAdminPanel()) {
	$url = Phpfox::getLib('assets')->getAssetUrl('PF.Site/flavors/' . flavor()->active->id . '/assets/autoload.js');
    $this->_sFooter .= '<script src="' . $url . '"></script>';
} 
 ";s:22:"template_getheader_css";s:178:"if (!defined('PHPFOX_INSTALLER') && !Phpfox::isAdminPanel()) {
	$Theme->folder = flavor()->active->legacy->theme;
	$Theme->flavor_folder = flavor()->active->legacy->flavor;
} 
 ";s:22:"template_getheader_end";s:7576:"if (!Phpfox::isAdminPanel()) {
    $url = Phpfox::getLib('assets')->getAssetUrl('PF.Site/flavors/' . flavor()->active->id . '/assets/autoload.css');
	$sData .= '<link href="' . $url . 'autoload.css?v=' . Phpfox::internalVersion() . '" rel="stylesheet">';
} 
 $aPhrases = [
    'oops_something_went_wrong' => _p('oops_something_went_wrong'),
    'notice'                    => _p('notice'),
    'view_previous_comments'    => _p('view_previous_comments'),
    'view_number_more_comments' => _p('view_number_more_comments'),
    'view_one_more_comment'     => _p('view_one_more_comment'),
    'remove_preview'            => _p('remove_preview'),
    'edited'                    => _p('edited'),
    'show_edit_history'         => _p('show_edit_history'),
    'edit_history'              => _p('edit_history'),
    'you'                       => _p('you__l'),
    'stickers'                  => _p('stickers'),
    'pages'                     => _p('pages'),
    'groups'                    => _p('groups'),
    'submit'                    => _p('submit')

];

$sData .= '<script>var comment_phrases = ' . json_encode($aPhrases) . ';</script>'; 
 if (Phpfox::getParam('v.pf_video_allow_create_feed_when_add_new_item') && Phpfox::getUserParam('v.pf_video_view')) {
    $video_phrases = [
        'video' => _p('Video'),
        'say' => _p('say_something_about_this_video'),
        'uploading' => _p('Uploading...'),
        'no_friends_found' => _p('no_friends_found'),
        'share' => \_p('share')
    ];

    $sData .= '<script>var v_phrases = ' . json_encode($video_phrases) . ';</script>';
    if (Phpfox::isAppActive('PHPfox_Videos')) {
        $val = user('pf_video_share', 1);
        $val = ($val) ? 1 : 0;
        $bCanCheckIn = Phpfox::getService('v.video')->canCheckInInFeed();

        $sData .= '<script>window.can_post_video = ' . (Phpfox::getService('v.video')->checkLimitation() ? 1 : 0) . ';</script>';
        $sData .= '<script>window.can_post_video_on_profile = ' . $val . ';</script>';
        $sData .= '<script>window.can_checkin_in_video = ' . $bCanCheckIn . ';</script>';
    }
    $appId = Phpfox::getParam('link.facebook_app_id');
    $sData .= '<script>v_facebook_app_id = "' . $appId . '";</script>';
    $sData .= '<div id="fb-root"></div><script crossorigin="anonymous" async defer src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v9.0"></script>';
} 
 $sData .= '<script>var pf_im_site_title = "' . Phpfox::getParam('core.site_title') . ' - ' . _p('messengers') . '"; var ban_filters = []; var ban_users = []; var pf_minimise_chat_dock = ' . (int)Phpfox::getParam('im.pf_im_minimise_chat_dock') . ';';
// bring ban filters word to fe
$aFilters = Phpfox::getService('ban')->getFilters('word');
$pf_im_chat_server = setting('pf_im_chat_server', 'nodejs');

if (is_array($aFilters)) {
    foreach ($aFilters as $aFilter) {
        $sData .= "ban_filters['$aFilter[find_value]'] = '" . html_entity_decode($aFilter['replacement']) . "';";
        $aUserGroupsAffected = $aFilter['user_groups_affected'];
        if (is_array($aUserGroupsAffected) && !empty($aUserGroupsAffected)) {
            foreach ($aUserGroupsAffected as $aUserGroup) {
                if ($aUserGroup['user_group_id'] == Phpfox::getUserBy('user_group_id')) {
                    if ($aFilter['return_user_group'] !== null) {
                        $sData .= "ban_users['$aFilter[find_value]'] = '".$aFilter['ban_id']."';";
                    }
                    break;
                }
            }
        }
    }
}
$sData .= 'var global_update_time ="' . setting('core.global_update_time') . '";';

if($pf_im_chat_server == 'nodejs') {
// generate token
    if (!defined('PHPFOX_IM_TOKEN') || !PHPFOX_IM_TOKEN) {
        if (setting('pf_im_node_server_key')) {
            date_default_timezone_set("UTC");
            $imToken = md5(strtotime('today midnight') . setting('pf_im_node_server_key'));
        } else {
            $imToken = '';
        }
    } else {
        $imToken = PHPFOX_IM_TOKEN;
        $sData .= 'var pf_im_using_host = true;';
    }
    $sData .= 'var pf_im_token ="' . $imToken . '";';
    $sData .= 'var pf_im_node_server ="' . setting('pf_im_node_server') . '";';
// end generate token
}

// check blocked users
$aBlockedUsers = Phpfox::getService('user.block')->get(null, true);
if (!empty($aBlockedUsers)) {
    $sData .= 'var pf_im_blocked_users = [' . implode(',', $aBlockedUsers) . '];';
}

// get delete message time
if (setting('pf_time_to_delete_message')) {
    $sData .= 'var pf_time_to_delete_message = ' . setting('pf_time_to_delete_message') * 86400000 . ';';
}

// get custom sound
if (storage()->get('core-im/sound')) {
    $aCusSound = (array)storage()->get('core-im/sound')->value;
    if ($aCusSound['option'] === 'custom' && $aCusSound['custom_file']) {
        $sData .= 'var pf_im_custom_sound = "' . $aCusSound['custom_file'] . '";';
    }
}

// check module Attachment enable
if (Phpfox::isModule('attachment')) {
    $sData .= 'var pf_im_attachment_enable = true;';
    // get attachment file types
    $sData .= 'var pf_im_attachment_types = "' . implode(', ', \Phpfox::getService('attachment.type')->getTypes()) . '";';
}

// check App Twemoji
if (Phpfox::isApps('PHPfox_Twemoji_Awesome')) {
    $sData .= 'var pf_im_twemoji_enable = true;';
}

$sData .= 'var pf_im_chat_server ="' . $pf_im_chat_server . '";';
if($pf_im_chat_server == 'firebase') {
    $sData .= 'var pf_im_algolia_app_id = "' . setting('pf_im_algolia_app_id') . '";';
    $sData .= 'var pf_im_algolia_api_key = "' . setting('pf_im_algolia_api_key') . '";';
    //Support mobile push
    $sData .= 'var pf_im_firebase_server_key ="'.setting('mobile.mobile_firebase_server_key').'";';
    $sData .= 'var pf_im_firebase_sender_id ="'.setting('mobile.mobile_firebase_sender_id').'";';
}
$sData .= '</script>';

if($pf_im_chat_server == 'firebase') {
    $fireBaseConfig = setting('pf_firebase_auth_code_snippet');
    if ($fireBaseConfig && preg_match('/firebaseConfig/', $fireBaseConfig)) {
        $sData .= '<script>' . $fireBaseConfig . '</script>';
        if (strpos($sData, 'firebase-app.js') === false) {
            $sData .= '<script src="https://www.gstatic.com/firebasejs/6.0.2/firebase-app.js"></script>';
        }
        if (strpos($sData, 'firebase-auth.js') === false) {
            $sData .= '<script src="https://www.gstatic.com/firebasejs/6.0.2/firebase-auth.js"></script>';
        }
        if (strpos($sData, 'firebase-firestore.js') === false) {
            $sData .= '<script src="https://www.gstatic.com/firebasejs/6.0.2/firebase-firestore.js"></script>';
        }
        $sData .= '<script src="https://cdn.jsdelivr.net/algoliasearch/3/algoliasearch.min.js"></script> ';
    }
    $sData .= '<script>var firebasePassword = "' . md5(Phpfox::getUserId() . Phpfox::getParam('core.salt')) . '";</script>';
}
//b5395a778c6a5b77ab1240765a64cc1a 
 if(Phpfox::isAppActive('Core_BetterAds') && isset($sData)) {
    $aRecommendSizes = Phpfox::getService('ad.get')->getRecommendImageSizes();
    $sData .= '<script>var betteradsRecommendSizes = [];';
    foreach ($aRecommendSizes as $iBlock => $aRecommendSize) {
        $sData .= "betteradsRecommendSizes[$iBlock] = [];";
        foreach ($aRecommendSize as $iTypeId => $sizes) {
            $sData .= "betteradsRecommendSizes[$iBlock][$iTypeId] = '$sizes';";
        }
    }
    $sData .= '</script>';
} 
 if (isset($sData) && Phpfox::isAppActive('Core_MobileApi')) {
    $sData .= Phpfox::getService('mobile.admincp.setting')->getSmartBannerScript();
} 
 ";s:25:"template_gettemplate_pass";s:300:"$path = flavor()->active->path;
$template = $path . 'html/' . $sTemplate . '.html';
if (file_exists($template)) {
	$vars = $this->getVar();
	$content = view('@Flavor/' . $sTemplate . '.html', $vars);
	echo $content;

	$skip_layout = true;

	Phpfox_Template::instance()->clean([
		'sHeader'
	]);
} 
 ";s:24:"template_gettemplatefile";s:2292:"$path = flavor()->active->path;
$sThemeFile = $path . 'html/' . $sTemplate . PHPFOX_TPL_SUFFIX;
if (file_exists($sThemeFile)) {
	$sFile = $sThemeFile;
} 
 $sDir = dirname(dirname(dirname(dirname(dirname(dirname(__FILE__))))));
$sCommentPath = $sDir . '/PF.Site/Apps/core-comments/views/block/';

if ($sTemplate == 'feed.block.comment') {
    $sTemplateFile = $sCommentPath . 'comment' . PHPFOX_TPL_SUFFIX;
    if (file_exists($sTemplateFile)) {
        $sFile = $sTemplateFile;
    }
}

if ($sTemplate == 'comment.block.mini') { // overwrite material-html template, it will @deprecated in Core 4.8.0
    $sTemplateFile = $sCommentPath . 'mini' . PHPFOX_TPL_SUFFIX;
    if (file_exists($sTemplateFile)) {
        $sFile = $sTemplateFile;
    }
} 
 //todo core should support to do this
$sDir = dirname(dirname(dirname(dirname(dirname(dirname(__FILE__))))));
$sCoreMessagesPath = $sDir . '/PF.Site/Apps/core-messages/views/controller/';
if ($sTemplate == 'mail.controller.index') {
    $sTemplateFile = $sCoreMessagesPath . 'index' . PHPFOX_TPL_SUFFIX;
    if (file_exists($sTemplateFile)) {
        $sFile = $sTemplateFile;
    }
}
if ($sTemplate == 'mail.controller.panel') {
    $sTemplateFile = $sCoreMessagesPath . 'panel' . PHPFOX_TPL_SUFFIX;
    if (file_exists($sTemplateFile)) {
        $sFile = $sTemplateFile;
    }
} 
 $savedItemSupportDetailTemplate = ['v.controller.play'];
if (in_array($sTemplate, $savedItemSupportDetailTemplate)) {
    $this->_aVars['bIsDetailPage'] = true;
} 
 if(Phpfox::isAppActive('P_Reaction')) {
    $sDir = dirname(dirname(dirname(dirname(dirname(dirname(__FILE__))))));
    $sViewPath = $sDir . '/PF.Site/Apps/p-reaction/views/block/';

    if (in_array($sTemplate, ['ynccomment.block.like-link', 'like.block.link'])) {
        $sTemplate = 'preaction.block.link';
        $sTemplateFile = $sViewPath . 'link' . PHPFOX_TPL_SUFFIX;
        if (cached_file_exists($sTemplateFile)) {
            $sFile = $sTemplateFile;
        }
    }
    if (in_array($sTemplate, ['ynccomment.block.like-display', 'like.block.display'])) {
        $sTemplate = 'preaction.block.display';
        $sTemplateFile = $sViewPath . 'display' . PHPFOX_TPL_SUFFIX;
        if (cached_file_exists($sTemplateFile)) {
            $sFile = $sTemplateFile;
        }
    }
} 
 ";s:40:"theme.component_controller_admincp_index";s:898:"$flavor_default = '';
$default = storage()->get('flavor/default');
if (isset($default->value)) {
	$flavor_default = $default->value;
}
$themes = [];
$default_theme = [];
$oAssets =  Phpfox::getLib('assets');
foreach (flavor()->all() as $flavor) {
	$assetUrl =  $oAssets->getAssetUrl($flavor->url . 'theme.png');
	if ($flavor->id == $flavor_default) {
		$default_theme = [
			'theme_id' => $flavor->id,
			'is_default' => true,
			'image' => ($flavor->icon ? ' class="image_load has_image" data-src="' . $assetUrl . '" ' : ''),
			'name' => $flavor->name
		];

		continue;
	}

	$themes[] = [
		'theme_id' => $flavor->id,
		'is_default' => false,
		'image' => ($flavor->icon ? ' class="image_load has_image" data-src="' . $assetUrl . '" ' : ''),
		'name' => $flavor->name
	];
}

if ($default_theme) {
	$themes = array_merge([$default_theme], $themes);
}
else {
	$themes[0]['is_default'] = true;
} 
 ";s:46:"admincp.service_maintain_delete_files_get_list";s:42646:"$aPluginFiles[] = 'PF.Base/module/photo/';
$aPluginFiles[] = 'PF.Site/Apps/core-photos/assets/autoload.css'; 
 $aPluginFiles[] = 'PF.Base/module/comment/'; 
 $aPluginFiles[] = 'PF.Base/module/newsletter/'; 
 $aPluginFiles[] = 'PF.Base/module/poke/'; 
 $aPluginFiles[] = 'PF.Base/module/pages/'; 
 $aPluginFiles[] = 'PF.Base/module/music/';
$aPluginFiles[] = 'PF.Site/Apps/core-music/assets/autoload.css'; 
 $aPluginFiles[] = 'PF.Site/Apps/core-amazon-s3/assets';
$aPluginFiles[] = 'PF.Site/Apps/core-amazon-s3/vendor';
$aPluginFiles[] = 'PF.Site/Apps/core-amazon-s3/composer.json';
$aPluginFiles[] = 'PF.Site/Apps/core-amazon-s3/composer.lock'; 
 $aPluginFiles[] = 'PF.Base/module/event/'; 
 $aPluginFiles[] = 'PF.Site/Apps/core-groups/hooks/link.component_service_callback_getactivityfeed__1.php';
$aPluginFiles[] = 'PF.Site/Apps/core-groups/hooks/photo.component_ajax_process_done.php'; 
 $aPluginFiles[] = 'PF.Base/module/egift/'; 
 $aPluginFiles[] = 'PF.Base/module/mail/';
$aPluginFiles[] = 'PF.Base/less/modules/mail.less'; 
 $aPluginFiles[] = 'PF.Base/module/user/include/component/block/purchasepoints.class.php';
$aPluginFiles[] = 'PF.Base/module/user/template/default/block/purchasepoints.html.php';
$aPluginFiles[] = 'PF.Site/Apps/core-activity-points/Block/InformationBlock.php';
$aPluginFiles[] = 'PF.Site/Apps/core-activity-points/views/block/information.html.php'; 
 defined('PHPFOX') or exit('NO DICE!');
$aPluginFiles[] = 'PF.Base/module/blog/';
$aPluginFiles[] = 'PF.Site/Apps/core-blogs/Block/PopularTopic.php';
$aPluginFiles[] = 'PF.Site/Apps/core-blogs/views/block/topic.html.php'; 
 $aPluginFiles[] = 'PF.Base/module/quiz/'; 
 $aPluginFiles[] = 'PF.Base/module/poll/'; 
 $aPluginFiles[] = 'PF.Base/module/forum/'; 
 $aMore = [
    "PF.Site/Apps/phpFox_CKEditor/assets/autoload.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/autoload.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/adapters/jquery.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/build-config.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/CHANGES.md",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/ckeditor.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/config.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/contents.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/af.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ar.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/bg.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/bn.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/bs.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ca.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/cs.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/cy.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/da.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/de-ch.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/de.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/el.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/en-au.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/en-ca.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/en-gb.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/en.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/eo.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/es.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/et.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/eu.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/fa.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/fi.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/fo.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/fr-ca.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/fr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/gl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/gu.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/he.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/hi.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/hr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/hu.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/id.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/is.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/it.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ja.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ka.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/km.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ko.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ku.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/lt.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/lv.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/mk.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/mn.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ms.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/nb.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/nl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/no.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/oc.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/pl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/pt-br.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/pt.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ro.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ru.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/si.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/sk.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/sl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/sq.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/sr-latn.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/sr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/sv.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/th.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/tr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/tt.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/ug.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/uk.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/vi.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/zh-cn.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/lang/zh.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/LICENSE.md",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/a11yhelp.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/_translationstatus.txt",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/af.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/ar.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/bg.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/ca.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/cs.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/cy.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/da.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/de-ch.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/de.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/el.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/en-gb.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/en.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/eo.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/es.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/et.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/eu.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/fa.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/fi.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/fo.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/fr-ca.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/fr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/gl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/gu.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/he.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/hi.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/hr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/hu.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/id.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/it.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/ja.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/km.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/ko.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/ku.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/lt.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/lv.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/mk.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/mn.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/nb.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/nl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/no.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/oc.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/pl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/pt-br.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/pt.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/ro.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/ru.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/si.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/sk.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/sl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/sq.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/sr-latn.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/sr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/sv.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/th.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/tr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/tt.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/ug.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/uk.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/vi.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/zh-cn.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/a11yhelp/dialogs/lang/zh.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/about/dialogs/about.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/about/dialogs/hidpi/logo_ckeditor.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/about/dialogs/logo_ckeditor.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/clipboard/dialogs/paste.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/dialog/dialogDefinition.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/icons.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/icons_hidpi.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/image/dialogs/image.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/image/images/noimage.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/link/dialogs/anchor.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/link/dialogs/link.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/link/images/anchor.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/link/images/hidpi/anchor.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/magicline/images/hidpi/icon-rtl.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/magicline/images/hidpi/icon.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/magicline/images/icon-rtl.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/magicline/images/icon.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/pastefromword/filter/default.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/scayt/CHANGELOG.md",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/scayt/dialogs/options.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/scayt/dialogs/toolbar.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/scayt/LICENSE.md",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/scayt/README.md",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/scayt/skins/moono-lisa/scayt.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/_translationstatus.txt",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/af.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/ar.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/bg.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/ca.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/cs.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/cy.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/da.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/de-ch.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/de.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/el.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/en-gb.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/en.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/eo.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/es.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/et.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/eu.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/fa.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/fi.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/fr-ca.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/fr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/gl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/he.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/hr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/hu.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/id.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/it.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/ja.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/km.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/ko.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/ku.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/lt.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/lv.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/nb.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/nl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/no.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/oc.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/pl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/pt-br.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/pt.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/ru.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/si.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/sk.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/sl.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/sq.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/sv.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/th.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/tr.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/tt.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/ug.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/uk.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/vi.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/zh-cn.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/lang/zh.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/specialchar/dialogs/specialchar.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/table/dialogs/table.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/tabletools/dialogs/tableCell.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/wsc/dialogs/ciframe.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/wsc/dialogs/tmpFrameset.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/wsc/dialogs/wsc.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/wsc/dialogs/wsc.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/wsc/dialogs/wsc_ie.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/wsc/LICENSE.md",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/wsc/README.md",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/plugins/wsc/skins/moono-lisa/wsc.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/README.md",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/css/samples.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/img/github-top.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/img/header-bg.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/img/header-separator.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/img/logo.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/img/navigation-tip.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/index.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/js/sample.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/js/sf.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/ajax.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/api.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/appendto.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/assets/inlineall/logo.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/assets/outputxhtml/outputxhtml.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/assets/posteddata.php",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/assets/sample.jpg",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/assets/uilanguages/languages.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/datafiltering.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/dialog/assets/my_dialog.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/dialog/dialog.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/divreplace.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/enterkey/enterkey.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/htmlwriter/assets/outputforflash/outputforflash.fla",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/htmlwriter/assets/outputforflash/outputforflash.swf",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/htmlwriter/assets/outputforflash/swfobject.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/htmlwriter/outputforflash.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/htmlwriter/outputhtml.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/index.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/inlineall.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/inlinebycode.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/inlinetextarea.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/jquery.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/magicline/magicline.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/readonly.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/replacebyclass.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/replacebycode.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/sample.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/sample.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/sample_posteddata.php",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/tabindex.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/toolbar/toolbar.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/uicolor.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/uilanguages.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/wysiwygarea/fullpage.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/old/xhtmlstyle.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/css/fontello.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/font/config.json",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/font/fontello.eot",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/font/fontello.svg",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/font/fontello.ttf",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/font/fontello.woff",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/font/LICENSE.txt",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/index.html",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/js/abstracttoolbarmodifier.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/js/fulltoolbareditor.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/js/toolbarmodifier.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/js/toolbartextmodifier.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/lib/codemirror/codemirror.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/lib/codemirror/codemirror.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/lib/codemirror/javascript.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/lib/codemirror/LICENSE",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/lib/codemirror/neo.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/lib/codemirror/show-hint.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/samples/toolbarconfigurator/lib/codemirror/show-hint.js",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/dialog.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/dialog_ie.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/dialog_ie8.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/dialog_iequirks.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/editor.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/editor_gecko.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/editor_ie.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/editor_ie8.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/editor_iequirks.css",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/icons.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/icons_hidpi.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/arrow.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/close.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/hidpi/close.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/hidpi/lock-open.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/hidpi/lock.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/hidpi/refresh.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/lock-open.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/lock.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/refresh.png",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/images/spinner.gif",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/skins/moono-lisa/readme.md",
    "PF.Site/Apps/phpFox_CKEditor/assets/ckeditor/styles.js",
    "PF.Site/Apps/phpFox_CKEditor/hooks/forum.component_ajax_reply.php",
    "PF.Site/Apps/phpFox_CKEditor/hooks/get_editor_end.php",
    "PF.Site/Apps/phpFox_CKEditor/hooks/set_editor_end.php",
    "PF.Site/Apps/phpFox_CKEditor/hooks/template_getheader_exclude_bundle_js.php",
    "PF.Site/Apps/phpFox_CKEditor/hooks/template_getheader_setting.php",
    "PF.Site/Apps/phpFox_CKEditor/icon.png",
    "PF.Site/Apps/phpFox_CKEditor/Install.php",
    "PF.Site/Apps/phpFox_CKEditor/start.php",
    "PF.Site/Apps/phpFox_CKEditor/views/admincp.html",
];
$aPluginFiles = array_merge($aPluginFiles, $aMore); 
 $aPluginFiles[] = 'PF.Site/Apps/core-videos/hooks/Core_View_Functions_Breadcrumb.php';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/hooks/groups.service_pages_getmenu.php';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/hooks/pages.service_pages_getmenu.php';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/hooks/phpfox_assign_ajax_browsing.php';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/hooks/profile.component_controller_index_process_after_requests.php';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/hooks/profile.service_profile_get_profile_menu.php';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/vendor/zencoder/zencoder-php/LICENSE';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/vendor/zencoder/zencoder-php/README.md';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/admincp.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/admincp_category.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/categories.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/delete.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/feed.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/index.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/macro.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/manage.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/process.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/share.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/views/view.html';
$aPluginFiles[] = 'PF.Site/Apps/core-videos/vendor/tpyo'; 
 $aPluginFiles[] = 'PF.Base/module/subscribe/';
$aPluginFiles[] = 'PF.Base/less/modules/subscribe.less'; 
 $aMore = [
    "PF.Site/Apps/Core_BetterAds/Ajax/Ajax.php",
    "PF.Site/Apps/Core_BetterAds/assets/autoload.css",
    "PF.Site/Apps/Core_BetterAds/assets/autoload.js",
    "PF.Site/Apps/Core_BetterAds/assets/autoload.less",
    "PF.Site/Apps/Core_BetterAds/Block/Display.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_1.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_10.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_11.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_12.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_2.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_3.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_4.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_5.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_6.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_7.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_8.php",
    "PF.Site/Apps/Core_BetterAds/Block/Display_9.php",
    "PF.Site/Apps/Core_BetterAds/Block/Inner.php",
    "PF.Site/Apps/Core_BetterAds/Block/Sample.php",
    "PF.Site/Apps/Core_BetterAds/Block/Sponsored.php",
    "PF.Site/Apps/Core_BetterAds/Block/Sponsored_Blog.php",
    "PF.Site/Apps/Core_BetterAds/Block/Sponsored_Event.php",
    "PF.Site/Apps/Core_BetterAds/Block/Sponsored_Marketplace.php",
    "PF.Site/Apps/Core_BetterAds/Block/Sponsored_Photo.php",
    "PF.Site/Apps/Core_BetterAds/Block/Sponsored_Poll.php",
    "PF.Site/Apps/Core_BetterAds/Block/Sponsored_Quiz.php",
    "PF.Site/Apps/Core_BetterAds/Block/Sponsored_Video.php",
    "PF.Site/Apps/Core_BetterAds/Controller/AddController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/Admin/AddController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/Admin/AddPlacementController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/Admin/IndexController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/Admin/InvoiceController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/Admin/PlacementController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/Admin/SponsorController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/IframeController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/ImageController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/IndexController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/InvoiceController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/ManageController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/ManageSponsorController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/PreviewController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/ReportController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/SampleController.php",
    "PF.Site/Apps/Core_BetterAds/Controller/SponsorController.php",
    "PF.Site/Apps/Core_BetterAds/hooks/blog.template_block_entry_links_main.php",
    "PF.Site/Apps/Core_BetterAds/hooks/event.template_block_entry_links_main.php",
    "PF.Site/Apps/Core_BetterAds/hooks/feed.service_feed_can_sponsored.php",
    "PF.Site/Apps/Core_BetterAds/hooks/get_module_blocks.php",
    "PF.Site/Apps/Core_BetterAds/hooks/marketplace.template_block_entry_links_main.php",
    "PF.Site/Apps/Core_BetterAds/hooks/music.template_block_entry_links_main.php",
    "PF.Site/Apps/Core_BetterAds/hooks/photo.template_block_menu.php",
    "PF.Site/Apps/Core_BetterAds/hooks/poll.template_block_entry_links_main.php",
    "PF.Site/Apps/Core_BetterAds/hooks/quiz.template_block_entry_links_main.php",
    "PF.Site/Apps/Core_BetterAds/icon.png",
    "PF.Site/Apps/Core_BetterAds/Install.php",
    "PF.Site/Apps/Core_BetterAds/Installation/Database/BetterAds.php",
    "PF.Site/Apps/Core_BetterAds/Installation/Database/Country.php",
    "PF.Site/Apps/Core_BetterAds/Installation/Database/Invoice.php",
    "PF.Site/Apps/Core_BetterAds/Installation/Database/Log.php",
    "PF.Site/Apps/Core_BetterAds/Installation/Database/Plan.php",
    "PF.Site/Apps/Core_BetterAds/Installation/Database/Sponsor.php",
    "PF.Site/Apps/Core_BetterAds/Installation/Database/View.php",
    "PF.Site/Apps/Core_BetterAds/phrase.json",
    "PF.Site/Apps/Core_BetterAds/Service/Ads.php",
    "PF.Site/Apps/Core_BetterAds/Service/Callback.php",
    "PF.Site/Apps/Core_BetterAds/Service/Get.php",
    "PF.Site/Apps/Core_BetterAds/Service/Process.php",
    "PF.Site/Apps/Core_BetterAds/Service/Report.php",
    "PF.Site/Apps/Core_BetterAds/Service/Sponsor.php",
    "PF.Site/Apps/Core_BetterAds/start.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_1.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_10.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_11.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_12.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_2.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_3.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_4.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_5.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_6.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_7.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_8.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/display_9.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/inner.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/sample.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/sponsored.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/sponsored_blog.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/sponsored_event.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/sponsored_marketplace.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/sponsored_photo.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/sponsored_poll.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/sponsored_quiz.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/sponsored_video.html.php",
    "PF.Site/Apps/Core_BetterAds/views/block/targetting.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/add.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/admincp/add.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/admincp/addplacement.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/admincp/index.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/admincp/invoice.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/admincp/placement.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/admincp/sponsor.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/iframe.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/image.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/index.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/invoice.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/manage-sponsor.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/manage.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/preview.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/report.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/sample.html.php",
    "PF.Site/Apps/Core_BetterAds/views/controller/sponsor.html.php",
    // remove from 4.2.0
    "PF.Site/Apps/core-better-ads/Controller/IframeController.php",
    "PF.Site/Apps/core-better-ads/views/controller/iframe.html.php",
    "PF.Site/Apps/core-better-ads/Block/Sponsored_Blog.php",
    "PF.Site/Apps/core-better-ads/Block/Sponsored_Event.php",
    "PF.Site/Apps/core-better-ads/Block/Sponsored_Marketplace.php",
    "PF.Site/Apps/core-better-ads/Block/Sponsored_Photo.php",
    "PF.Site/Apps/core-better-ads/Block/Sponsored_Poll.php",
    "PF.Site/Apps/core-better-ads/Block/Sponsored_Quiz.php",
    "PF.Site/Apps/core-better-ads/Block/Sponsored_Video.php",
    "PF.Site/Apps/core-better-ads/views/block/sponsored_blog.html.php",
    "PF.Site/Apps/core-better-ads/views/block/sponsored_event.html.php",
    "PF.Site/Apps/core-better-ads/views/block/sponsored_marketplace.html.php",
    "PF.Site/Apps/core-better-ads/views/block/sponsored_photo.html.php",
    "PF.Site/Apps/core-better-ads/views/block/sponsored_poll.html.php",
    "PF.Site/Apps/core-better-ads/views/block/sponsored_quiz.html.php",
    "PF.Site/Apps/core-better-ads/views/block/sponsored_video.html.php",
    "PF.Site/Apps/core-better-ads/Block/Display_1.php",
    "PF.Site/Apps/core-better-ads/Block/Display_10.php",
    "PF.Site/Apps/core-better-ads/Block/Display_11.php",
    "PF.Site/Apps/core-better-ads/Block/Display_12.php",
    "PF.Site/Apps/core-better-ads/Block/Display_2.php",
    "PF.Site/Apps/core-better-ads/Block/Display_3.php",
    "PF.Site/Apps/core-better-ads/Block/Display_4.php",
    "PF.Site/Apps/core-better-ads/Block/Display_5.php",
    "PF.Site/Apps/core-better-ads/Block/Display_6.php",
    "PF.Site/Apps/core-better-ads/Block/Display_7.php",
    "PF.Site/Apps/core-better-ads/Block/Display_8.php",
    "PF.Site/Apps/core-better-ads/Block/Display_9.php",
    "PF.Site/Apps/core-better-ads/views/block/display_1.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_10.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_11.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_12.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_2.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_3.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_4.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_5.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_6.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_7.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_8.html.php",
    "PF.Site/Apps/core-better-ads/views/block/display_9.html.php",
    "PF.Site/Apps/core-better-ads/hooks/blog.template_block_entry_links_main.php",
    "PF.Site/Apps/core-better-ads/hooks/music.template_block_entry_links_main.php",
    "PF.Site/Apps/core-better-ads/Service/Ads.php",
    "PF.Site/Apps/core-better-ads/hooks/event.template_block_entry_links_main.php",
    "PF.Site/Apps/core-better-ads/hooks/marketplace.template_block_entry_links_main.php",
    "PF.Site/Apps/core-better-ads/hooks/photo.template_block_menu.php",
    "PF.Site/Apps/core-better-ads/hooks/poll.template_block_entry_links_main.php",
    "PF.Site/Apps/core-better-ads/hooks/quiz.template_block_entry_links_main.php",
];
$aPluginFiles = isset($aPluginFiles) && is_array($aPluginFiles) ? array_merge($aPluginFiles, $aMore) : $aMore;

$aPluginFiles[] = 'PF.Base/module/ad/';
$aPluginFiles[] = 'PF.Base/less/modules/ad.less';
$aPluginFiles[] = 'PF.Site/Apps/core-better-ads/hooks/get_t.php'; 
 $aMore = [
    "PF.Site/Apps/phpFox_Shoutbox/Ajax/Ajax.php",
    "PF.Site/Apps/phpFox_Shoutbox/assets/autoload.css",
    "PF.Site/Apps/phpFox_Shoutbox/assets/autoload.js",
    "PF.Site/Apps/phpFox_Shoutbox/assets/autoload.less",
    "PF.Site/Apps/phpFox_Shoutbox/Block/Chat.php",
    "PF.Site/Apps/phpFox_Shoutbox/hooks/core.component_controller_index_member_start.php",
    "PF.Site/Apps/phpFox_Shoutbox/hooks/groups.component_controller_view_assign.php",
    "PF.Site/Apps/phpFox_Shoutbox/hooks/pages.component_controller_view_assign.php",
    "PF.Site/Apps/phpFox_Shoutbox/hooks/template_getheader_setting.php",
    "PF.Site/Apps/phpFox_Shoutbox/icon.png",
    "PF.Site/Apps/phpFox_Shoutbox/Install.php",
    "PF.Site/Apps/phpFox_Shoutbox/Installation/Database/Shoutbox.php",
    "PF.Site/Apps/phpFox_Shoutbox/polling.php",
    "PF.Site/Apps/phpFox_Shoutbox/Service/Callback.php",
    "PF.Site/Apps/phpFox_Shoutbox/Service/Get.php",
    "PF.Site/Apps/phpFox_Shoutbox/Service/Process.php",
    "PF.Site/Apps/phpFox_Shoutbox/Service/Shoutbox.php",
    "PF.Site/Apps/phpFox_Shoutbox/start.php",
    "PF.Site/Apps/phpFox_Shoutbox/views/block/chat.html.php",
    "PF.Site/Apps/core-shoutbox/assets/autoload.less",
    "PF.Site/Apps/core-shoutbox/assets/autoload.css",
];

$aPluginFiles = array_merge($aPluginFiles, $aMore); 
 $aPluginFiles[] = 'PF.Site/Apps/phpFox_RESTful_API'; 
 $aPluginFiles[] = 'PF.Site/flavors/material/less/mt_includes/all-message.less';
$aPluginFiles[] = 'PF.Site/flavors/material/html/mail.controller.index.html.php';
$aPluginFiles[] = 'PF.Site/flavors/material/html/mail.controller.panel.html.php';
$aPluginFiles[] = 'PF.Site/flavors/material/html/profile.controller.points.html.php';
$aPluginFiles[] = 'PF.Site/flavors/material/hooks/component_controller_points_process_end.php'; 
 ";s:36:"feed.service_feed_getsharelinks__end";s:1150:"if (!Phpfox::getParam('photo.photo_allow_create_feed_when_add_new_item') && isset($aAcceptedTypes)) {
    foreach ($aAcceptedTypes as $key => $acceptedType) {
        if ($acceptedType == 'photo') {
            unset($aAcceptedTypes[$key]);
            break;
        }
    }
} 
 if (defined('PHPFOX_IS_PAGES_VIEW')) {
    foreach ($aLinks as $index => $aLink) {
        if ($aLink['module_id'] == 'photo' && $aIntegrates = storage()->get('pages_integrate')) {
            $aIntegrates = (array)$aIntegrates->value;
            if (array_key_exists('photo', $aIntegrates) && !$aIntegrates['photo']) {
                unset($aLinks[$index]);
            }
        }
    }
} 
 if (defined('PHPFOX_IS_PAGES_VIEW') && defined('PHPFOX_PAGES_ITEM_TYPE') && PHPFOX_PAGES_ITEM_TYPE === 'groups') {
    foreach ($aLinks as $index => $aLink) {
        if ($aLink['module_id'] == 'photo' && $aIntegrates = storage()->get('groups_integrate')) {
            $aIntegrates = (array)$aIntegrates->value;
            if (array_key_exists('photo', $aIntegrates) && !$aIntegrates['photo']) {
                unset($aLinks[$index]);
            }
        }
    }
} 
 ";s:11:"route_start";s:10151:"\Core\Api\ApiManager::register([
    'photo/:id' => [
        'api_service' => 'photo.api',
        'maps'        => [
            'get'    => 'get',
            'put'    => 'put',
            'delete' => 'delete'
        ],
        'where'       => ['id' => '\d+']
    ],
    'photo'     => [
        'api_service' => 'photo.api',
        'maps'        => [
            'get'  => 'gets',
            'post' => 'post'
        ]
    ],
]); 
 \Core\Api\ApiManager::register([
    'comment/:id' => [
        'api_service' => 'comment.api',
        'maps'        => [
            'get'    => 'get',
            'put'    => 'put',
            'delete' => 'delete'
        ],
        'where'       => ['id' => '\d+']
    ],
    'comment'     => [
        'api_service' => 'comment.api',
        'maps'        => [
            'get'  => 'gets',
            'post' => 'post'
        ]
    ],
]); 
 \Core\Api\ApiManager::register([
    'pages/:id' => [
        'api_service' => 'pages.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id' => '\d+']
    ],
    'pages' => [
        'api_service' => 'pages.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ]
]); 
 \Core\Api\ApiManager::register([
    'music/song/:id' => [
        'api_service' => 'music.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id'=>'\d+']
    ],
    'music/song' => [
        'api_service' => 'music.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ],
    'music/album/:id' => [
        'api_service' => 'music.api',
        'maps' => [
            'get' => 'getAlbum',
            'put' => 'putAlbum',
            'delete' => 'deleteAlbum'
        ],
        'where' => ['id'=>'\d+']
    ],
    'music/album' => [
        'api_service' => 'music.api',
        'maps' => [
            'get' => 'getAlbums',
            'post' => 'postAlbum'
        ]
    ],
    'music/playlist/:id' => [
        'api_service' => 'music.api',
        'maps' => [
            'get' => 'getPlaylist',
            'put' => 'putPlaylist',
            'delete' => 'deletePlaylist'
        ],
        'where' => ['id'=>'\d+']
    ],
    'music/playlist' => [
        'api_service' => 'music.api',
        'maps' => [
            'get' => 'getPlaylists',
            'post' => 'postPlaylist'
        ]
    ],
]); 
 \Core\Api\ApiManager::register([
    'event/:id/rsvp' => [
        'api_service' => 'event.api',
        'maps' => [
            'put' => 'updateRsvp'
        ],
        'where' => ['id' => '\d+']
    ],
    'event/:id/guests' => [
        'api_service' => 'event.api',
        'maps' => [
            'get' => 'getGuests'
        ],
        'where' => ['id' => '\d+']
    ],
    'event/:id' => [
        'api_service' => 'event.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id' => '\d+']
    ],
    'event' => [
        'api_service' => 'event.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ],
    ],
]); 
 \Core\Api\ApiManager::register([
    'groups/:id' => [
        'api_service' => 'groups.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id' => '\d+']
    ],
    'groups' => [
        'api_service' => 'groups.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ]
]); 
 \Core\Api\ApiManager::register([
    //module blog
    'blog/:id' => [
        'api_service' => 'blog.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id'=>'\d+']
    ],
    'blog' => [
        'api_service' => 'blog.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ],
]); 
 \Core\Api\ApiManager::register([
    'quiz/:id' => [
        'api_service' => 'quiz.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id' => '\d+']
    ],
    'quiz' => [
        'api_service' => 'quiz.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ],
]); 
 \Core\Api\ApiManager::register([
    'poll/:id' => [
        'api_service' => 'poll.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id' => '\d+']
    ],
    'poll' => [
        'api_service' => 'poll.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ],
]); 
 \Core\Api\ApiManager::register([
    'forum/thread/:id' => [
        'api_service' => 'forum.api',
        'maps' => [
            'get' => 'getThread',
            'delete' => 'deleteThread',
            'put' => 'putThread'
        ],
        'where' => ['id' => '\d+']
    ],
    'forum/post/:id' => [
        'api_service' => 'forum.api',
        'maps' => [
            'get' => 'getPost',
            'delete' => 'deletePost',
            'put' => 'putPost'
        ],
        'where' => ['id' => '\d+']
    ],
    'forum/:id' => [
        'api_service' => 'forum.api',
        'maps' => [
            'get' => 'get',
        ],
        'where' => ['id' => '\d+']
    ],
    'forum/thread' => [
        'api_service' => 'forum.api',
        'maps' => [
            'get' => 'getThreads',
            'post' => 'postThread'
        ],
    ],
    'forum/post' => [
        'api_service' => 'forum.api',
        'maps' => [
            'get' => 'getPosts',
            'post' => 'postPost'
        ],
    ],
    'forum' => [
        'api_service' => 'forum.api',
        'maps' => [
            'get' => 'gets',
        ]
    ],
]); 
 \Core\Api\ApiManager::register([
    'video/:id' => [
        'api_service' => 'v.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id' => '\d+']
    ],
    'video' => [
        'api_service' => 'v.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ],
    'video/file' => [
        'api_service' => 'v.api',
        'maps' => [
            'post' => 'upload'
        ]
    ]
]); 
 \Core\Api\ApiManager::register([
    'marketplace/:id' => [
        'api_service' => 'marketplace.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id' => '\d+']
    ],
    'marketplace' => [
        'api_service' => 'marketplace.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ],
]); 
 $vendor = PHPFOX_DIR_SITE_APPS . "core-mobile-api" . PHPFOX_DS . "vendor" . PHPFOX_DS . "autoload.php";
if (!file_exists($vendor)) {
    die (" Please update composer first. ");
}
require_once PHPFOX_DIR_SITE_APPS . "core-mobile-api" . PHPFOX_DS . "vendor" . PHPFOX_DS . "autoload.php";

$resourceNaming = new \Apps\Core_MobileApi\Service\NameResource();

\Core\Api\ApiManager::register($resourceNaming->generateRestfulRoute('mobile')); 
 \Core\Api\ApiManager::register([
    'attachment/' => [
        'api_service' => 'attachment.api',
        'maps' => [
            'post' => 'post'
        ],
    ],
]); 
 \Core\Api\ApiManager::register([
    'core/temp-file' => [
        'api_service' => 'core.api',
        'maps' => [
            'post' => 'postTempFile'
        ],
    ],
]); 
 \Core\Api\ApiManager::register([
    'feed/:id' => [
        'api_service' => 'feed.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id'=>'\d+']
    ],
    'feed' => [
        'api_service' => 'feed.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ],
    'feed/share' => [
        'api_service' => 'feed.api',
        'maps' => [
            'post' => 'share'
        ]
    ],
]); 
 \Core\Api\ApiManager::register([
    'friend' => [
        'api_service' => 'friend.api',
        'maps' => [
            'get' => 'get',
            'delete' => 'delete'
        ],
    ],
    'friend/request' => [
        'api_service' => 'friend.api',
        'maps' => [
            'post' => 'addRequest',
            'delete' => 'cancelRequest',
            'put' => 'processRequest'
        ],
    ],
]); 
 \Core\Api\ApiManager::register([
    'like' => [
        'api_service' => 'like.api',
        'maps' => [
            'post' => 'post',
            'delete' => 'delete',
            'get' => 'get'
        ]
    ],
]); 
 \Core\Api\ApiManager::register([
    'link' => [
        'api_service' => 'link.api',
        'maps' => [
            'post' => 'post'
        ]
    ],

]); 
 defined('PHPFOX') or exit('NO DICE!');

\Core\Api\ApiManager::register([
    'search' => [
        'api_service' => 'search.api',
        'maps' => [
            'get' => 'get'
        ]
    ],
]); 
 defined('PHPFOX') or exit('NO DICE!');

\Core\Api\ApiManager::register([
    'user/:id' => [
        'api_service' => 'user.api',
        'maps' => [
            'get' => 'get',
            'put' => 'put',
            'delete' => 'delete'
        ],
        'where' => ['id'=>'\d+']
    ],
    'user' => [
        'api_service' => 'user.api',
        'maps' => [
            'get' => 'gets',
            'post' => 'post'
        ]
    ],
    'user/custom/:id' => [
        'api_service' => 'user.api',
        'maps' => [
            'get' => 'getCustom',
            'put' => 'putCustom'
        ],
        'where' => ['id'=>'\d+']
    ],
    'user/mine' => [
        'api_service' => 'user.api',
        'maps' => [
            'get' => 'getMine'
        ]
    ],
]); 
 ";s:27:"template_template_getmenu_3";s:4109:"if ((!(Phpfox::getUserParam('photo.can_view_photos'))) && isset($sConnection, $aMenus) && $sConnection == 'main') {
    foreach ($aMenus as $key => $menu) {
        if ($menu['module'] == 'photo') {
            unset($aMenus[$key]);
        }
    }
} 
 if (!Phpfox::getUserParam('pages.can_view_browse_pages')) {
    foreach ($aMenus as $index => $aMenu) {
        if ($aMenu['m_connection'] == 'main' && $aMenu['module'] == 'pages') {
            unset($aMenus[$index]);
        }
    }
} 
 /**
 * Created by PhpStorm.
 * User: phpFox
 * Date: 5/31/17
 * Time: 16:04
 */
defined('PHPFOX') or exit('NO DICE!');

if (Phpfox::isAppActive('Core_Music') && !Phpfox::getUserParam('music.can_access_music')) {
    foreach ($aMenus as $key => $value) {
        if ($value['module'] == 'music' && ($value['url'] = 'music' || $value['url'] = 'profile.music')) {
            unset($aMenus[$key]);
            break;
        }
    }
} 
 /**
 * Created by PhpStorm.
 * User: phpFox
 * Date: 5/31/17
 * Time: 16:04
 */
defined('PHPFOX') or exit('NO DICE!');

if (Phpfox::isAppActive('Core_Events') && !Phpfox::getUserParam('event.can_access_event')) {
    foreach ($aMenus as $key => $value) {
        if ($value['module'] == 'event' && ($value['url'] = 'event' || $value['url'] = 'profile.event')) {
            unset($aMenus[$key]);
            break;
        }
    }
} 
 if (!Phpfox::getUserParam('groups.pf_group_browse')) {
    foreach ($aMenus as $index => $aMenu) {
        if ($aMenu['m_connection'] == 'main' && $aMenu['module'] == 'groups') {
            unset($aMenus[$index]);
        }
    }
} 
 defined('PHPFOX') or exit('NO DICE!');
if (Phpfox::isModule('blog') && !Phpfox::getUserParam('blog.view_blogs')) {
    foreach ($aMenus as $key => $value) {
        if ($value['module'] == 'blog' && ($value['url'] = 'blog' || $value['url'] = 'profile.blog')) {
            unset($aMenus[$key]);
            break;
        }
    }
} 
 /**
 * Created by PhpStorm.
 * User: phpFox
 * Date: 5/31/17
 * Time: 16:04
 */
defined('PHPFOX') or exit('NO DICE!');

if (Phpfox::isAppActive('Core_Quizzes') && !Phpfox::getUserParam('quiz.can_access_quiz')) {
    foreach ($aMenus as $key => $value) {
        if ($value['module'] == 'quiz' && ($value['url'] = 'quiz' || $value['url'] = 'profile.quiz')) {
            unset($aMenus[$key]);
            break;
        }
    }
} 
 /**
 * Created by PhpStorm.
 * User: phpFox
 * Date: 5/31/17
 * Time: 16:04
 */
defined('PHPFOX') or exit('NO DICE!');

if (Phpfox::isAppActive('Core_Polls') && !Phpfox::getUserParam('poll.can_access_polls')) {
    foreach ($aMenus as $key => $value) {
        if ($value['module'] == 'poll' && ($value['url'] = 'poll' || $value['url'] = 'profile.poll')) {
            unset($aMenus[$key]);
            break;
        }
    }
} 
 /**
 * Created by PhpStorm.
 * User: phpFox
 * Date: 5/31/17
 * Time: 16:04
 */
defined('PHPFOX') or exit('NO DICE!');

if (Phpfox::isAppActive('Core_Forums') && !Phpfox::getUserParam('forum.can_view_forum')) {
    foreach ($aMenus as $key => $value) {
        if ($value['module'] == 'forum' && ($value['url'] = 'forum')) {
            unset($aMenus[$key]);
            break;
        }
    }
} 
 if ((!(user('pf_video_view', 1))) && $sConnection == 'main') {
    foreach ($aMenus as $key => $menu) {
        if ($menu['module'] == 'v') {
            unset($aMenus[$key]);
        }
    }
} 
 /**
 * Created by PhpStorm.
 * User: phpFox
 * Date: 5/31/17
 * Time: 16:04
 */
defined('PHPFOX') or exit('NO DICE!');

if (Phpfox::isAppActive('Core_Marketplace') && !Phpfox::getUserParam('marketplace.can_access_marketplace')) {
    foreach ($aMenus as $key => $value) {
        if ($value['module'] == 'marketplace' && ($value['url'] = 'marketplace' || $value['url'] = 'profile.marketplace')) {
            unset($aMenus[$key]);
            break;
        }
    }
} 
 if (!Phpfox::getUserParam('user.can_browse_users_in_public')) {
    foreach ($aMenus as $index => $aMenu) {
        if ($aMenu['m_connection'] == 'main' && $aMenu['module'] == 'user') {
            unset($aMenus[$index]);
        }
    }
} 
 ";s:29:"theme_get_default_photos_list";s:1002:"if (isset($flavor)) {
    $aPhotos['photo_default_album_photo'] = [
        'title' => _p('photo_album_default_photo'),
        'value' => $flavor->default_photo('photo_default_album_photo', true),
    ];
} 
 $aPhotos['music_default_photo'] = [
    'title' => _p('song_default_photo'),
    'value' => $flavor->default_photo('music_default_photo', true),
];
$aPhotos['music_default_album_photo'] = [
    'title' => _p('music_album_default_photo'),
    'value' => $flavor->default_photo('music_default_album_photo', true),
]; 
 $aPhotos['event_default_photo'] = [
    'title' => _p('event_default_photo'),
    'value' => $flavor->default_photo('event_default_photo', true),
]; 
 $aPhotos['video_default_photo'] = [
    'title' => _p('video_default_photo'),
    'value' => $flavor->default_photo('video_default_photo', true),
]; 
 $aPhotos['marketplace_default_photo'] = [
    'title' => _p('marketplace_default_photo'),
    'value' => $flavor->default_photo('marketplace_default_photo', true),
]; 
 ";s:37:"validator.admincp_user_settings_photo";s:2287:"$aValidation = [
    'points_photo'                        => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"Activity points" must be greater than or equal to 0'),
    ],
    'max_images_per_upload'               => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"Max images per upload" must be greater than 0'),
    ],
    'max_number_of_albums'                => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"Max number of albums" must be greater than or equal to 0'),
    ],
    'photo_mature_age_limit'              => [
        'def'   => 'int:required',
        'min'   => '1',
        'title' => _p('"Photo mature age limit" must be greater than 0'),
    ],
    'how_many_tags_on_own_photo'          => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"How many times can a user tag their own photo?" must be greater than or equal to 0'),
    ],
    'how_many_tags_on_other_photo'        => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"How many times can a user tag photos added by other users?" must be greater than or equal to 0'),
    ],
    'photo_max_upload_size'               => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"Max file size for photos upload" must be greater than or equal to 0'),
    ],
    'maximum_image_width_keeps_in_server' => [
        'def'   => 'int:required',
        'min'   => '1',
        'title' => _p('"Max image width keeps in server" must be greater than 0'),
    ],
    'photo_sponsor_price'                 => [
        'def'   => 'currency',
        'min'   => '0',
        'title' => _p('"Sponsor photo price" must be greater than or equal to 0'),
    ],
    'total_photos_displays'               => [
        'def'    => 'array:required',
        'subdef' => 'int:required',
        'min'    => '0',
        'title'  => _p('Each value of "Define how many images a user can view at once when browsing the public photo section" must be greater than 0'),
    ],
    'photo_total_photos_upload'                => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"Maximum number of photos" must be greater than or equal to 0'),
    ],
]; 
 ";s:12:"ajax_process";s:61:"Phpfox::getService('comment')->setCommentLimitSettings(); 
 ";s:47:"feed.service_callback__getnotificationmini_like";s:338:"preg_match_all('/(?<match>\[([\w]+)=([\d]+)\](?<name>[\p{L}\p{P}\p{S}\p{N}\s]+)\[\/([\w]+)\])/Umu', $sText, $matches);
if(isset($matches['match'])) {
    foreach($matches['match'] as $key=>$match) {
        if(isset($matches['name'][$key])) {
            $sText = str_replace($match, $matches['name'][$key], $sText);
        }
    }
} 
 ";s:29:"feed.service_feed_processfeed";s:4240:"if (isset($aOut['comments']) && count($aOut['comments'])) {
    foreach ($aOut['comments'] as $key => $aComment) {
        $aOut['comments'][$key]['extra_data'] = Phpfox::getService('comment')->getExtraByComment($aComment['comment_id']);
        $aOut['comments'][$key]['is_hidden'] = Phpfox::getService('comment')->checkHiddenComment($aComment['comment_id'], Phpfox::getUserId());
        $aOut['comments'][$key]['total_hidden'] = 1;
        $aOut['comments'][$key]['hide_ids'] = $aComment['comment_id'];
        $aOut['comments'][$key]['hide_this'] = $aOut['comments'][$key]['is_hidden'];
        if ($key && $aOut['comments'][$key - 1]['is_hidden'] && $aOut['comments'][$key]['is_hidden']) {
            $aOut['comments'][$key - 1]['hide_this'] = false;
            $aOut['comments'][$key]['hide_ids'] = $aOut['comments'][$key - 1]['hide_ids'] . ',' . $aComment['comment_id'];
            $aOut['comments'][$key]['total_hidden'] = $aOut['comments'][$key - 1]['total_hidden'] + 1;
        }
        if (isset($aComment['children']['comments']) && count($aComment['children']['comments'])) {
            foreach ($aComment['children']['comments'] as $ckey => $aChild) {
                $aOut['comments'][$key]['children']['comments'][$ckey]['extra_data'] = Phpfox::getService('comment')->getExtraByComment($aChild['comment_id']);
                $aOut['comments'][$key]['children']['comments'][$ckey]['is_hidden'] = Phpfox::getService('comment')->checkHiddenComment($aChild['comment_id'], Phpfox::getUserId());;
                $aOut['comments'][$key]['children']['comments'][$ckey]['total_hidden'] = 1;
                $aOut['comments'][$key]['children']['comments'][$ckey]['hide_ids'] = $aChild['comment_id'];
                $aOut['comments'][$key]['children']['comments'][$ckey]['hide_this'] = $aOut['comments'][$key]['children']['comments'][$ckey]['is_hidden'];
                if ($ckey && $aOut['comments'][$key]['children']['comments'][$ckey - 1]['is_hidden'] && $aOut['comments'][$key]['children']['comments'][$ckey]['is_hidden']) {
                    $aOut['comments'][$key]['children']['comments'][$ckey - 1]['hide_this'] = false;
                    $aOut['comments'][$key]['children']['comments'][$ckey]['hide_ids'] = $aOut['comments'][$key]['children']['comments'][$ckey - 1]['hide_ids'] . ',' . $aChild['comment_id'];
                    $aOut['comments'][$key]['children']['comments'][$ckey]['total_hidden'] = $aOut['comments'][$key]['children']['comments'][$ckey - 1]['total_hidden'] + 1;
                }
            }
        }
        if (!setting('comment.comment_show_replies_on_comment')) {
            $aOut['comments'][$key]['last_reply'] = Phpfox::getService('comment')->getLastChild($aComment['comment_id'], $aComment['type_id'], $aComment['item_id']);
        }
    }
} 
 if ($aOut['type_id'] == 'event' || $aOut['parent_module_id'] == 'event') {
    $iEventId = $aOut['item_id'];
    $iUserId = 0;
    $privacy = 0;

    if ($aOut['parent_module_id'] == 'event') {
        $iEventId = $aOut['parent_feed_id'];
        $aEvent = Phpfox::getService('event')->getEventSimple($iEventId);
        if (!empty($aEvent)) {
            $privacy = $aEvent['privacy'];
            $iUserId = $aEvent['user_id'];
        } else {
            $aOut = [];
        }
    } else {
        $privacy = $aOut['custom_data_cache']['privacy'];
        $iUserId = $aOut['custom_data_cache']['user_id'];
    }

    if (!empty($aOut) && $privacy == 5) {
        if (!Phpfox::getService('event')->isInvitedByOwner($iEventId, $iUserId, Phpfox::getUserId())) {
            $aOut = [];
        }
    }
} 
 if (isset($aOut['privacy'])) {
    $sIconClass = 'ico ';
    switch ((int)$aOut['privacy']) {
        case 0:
            $sIconClass .= 'ico-globe';
            break;
        case 1:
            $sIconClass .= 'ico-user3-two';
            break;
        case 2:
            $sIconClass .= 'ico-user-man-three';
            break;
        case 3:
            $sIconClass .= 'ico-lock';
            break;
        case 4:
            $sIconClass .= 'ico-gear-o';
            break;
        case 6:
            $sIconClass .= 'ico-user-circle-alt-o';
            break;
    }

    $aOut['privacy_icon_class'] = $sIconClass;
} 
 ";s:25:"module_getcomponent_start";s:407:"if ($sClass == 'feed.comment') {
    $sClass = 'comment.comment';
} 
 if ($sClass == 'feed.display' && !defined('PHPFOX_IS_PAGES_VIEW')) {
    defined('PHPFOX_CHECK_FEEDS_FOR_PAGES') || define('PHPFOX_CHECK_FEEDS_FOR_PAGES', true);
} 
 if ($sClass == 'feed.display' && !defined('PHPFOX_IS_PAGES_VIEW')) {
    defined('PHPFOX_CHECK_FEEDS_FOR_GROUPS') || define('PHPFOX_CHECK_FEEDS_FOR_GROUPS', true);
} 
 ";s:20:"template_gettemplate";s:1924:"if ($sTemplate == 'notification.controller.panel') {
    array_walk($this->_aVars['aNotifications'], function (&$aNotifcation) {
        if (in_array($aNotifcation['type_id'], ['feed_mini_like'])) {
            $aNotifcation['message'] = comment_parse_emojis($aNotifcation['message']);
        }
    });

} else if ($sTemplate == 'notification.controller.index') {
    array_walk($this->_aVars['aNotifications'], function (&$aNotifcationOfDay) {
        array_walk($aNotifcationOfDay, function (&$aNotifcation) {
            if (in_array($aNotifcation['type_id'], ['feed_mini_like'])) {
                $aNotifcation['message'] = comment_parse_emojis($aNotifcation['message']);
            }
        });
    });
} 
 if ($sTemplate == 'user.block.rows_wide') {
    $aUser = Phpfox::getLib('template')->getVar('aUser');
    $aLocation = [];
    if (!empty($aUser)) {
        if (!empty($aUser['country_iso']) && $sCountry = Phpfox::getService('core.country')->getCountry($aUser['country_iso'], 'country')) {
            $aLocation[] = $sCountry;
        }

        if (!empty($aUser['country_child_id']) && $sState = Phpfox::getService('core.country')->getChild($aUser['country_child_id'])) {
            $aLocation[] = $sState;
        }

        if (count($aLocation) < 2 && !empty($aUser['city_location'])) {
            $aLocation[] = $aUser['city_location'];
        }

        if (Phpfox::isUser()) {
            $aUser['is_blocked'] = Phpfox::getService('user.block')->isBlocked($aUser['user_id'], Phpfox::getUserId());
        }

        if (!isset($aUser['is_featured'])) {
            $aUser['is_featured'] = Phpfox::getService('user')->isFeatured($aUser['user_id']);
        }

        if (!empty($aLocation)) {
            $aLocation = array_reverse($aLocation);
            $aUser['location_string'] = implode(', ', $aLocation);
        }

        Phpfox::getLib('template')->assign('aUser', $aUser);
    }
} 
 ";s:34:"validator.admincp_settings_comment";s:1217:"$aValidation['comments_to_check'] = [
    'def'   => 'int:required',
    'min'   => '1',
    'title' => _p('"Comments To Check" must be greater than 0'),
];
$aValidation['total_minutes_to_wait_for_comments'] = [
    'def'   => 'int',
    'min'   => '0',
    'title' => _p('"Comment Minutes to Wait Until Next Check" be greater than or equal to 0'),
];
$aValidation['comments_show_on_activity_feeds'] = [
    'def'   => 'int',
    'min'   => '0',
    'title' => _p('"Number of comment will be shown on activity feeds" must be greater than or equal to 0'),
];
$aValidation['comments_show_on_item_details'] = [
    'def'   => 'int',
    'min'   => '0',
    'title' => _p('"Number of comment will be shown on item details" must be greater than or equal to 0'),
];
$aValidation['comment_replies_show_on_activity_feeds'] = [
    'def'   => 'int',
    'min'   => '0',
    'title' => _p('"Number of replies will be shown on each comment on activity feeds" must be greater than or equal to 0'),
];
$aValidation['comment_replies_show_on_item_details'] = [
    'def'   => 'int',
    'min'   => '0',
    'title' => _p('"Number of replies will be shown on each comment on item details" must be greater than or equal to 0'),
]; 
 ";s:39:"validator.admincp_user_settings_comment";s:298:"$aValidation['points_comment'] = [
    'def'   => 'int:required',
    'min'   => '0',
    'title' => _p('validate_points_comment'),
];

$aValidation['comment_post_flood_control'] = [
    'def'   => 'int:required',
    'min'   => '0',
    'title' => _p('validate_comment_post_flood_control'),
]; 
 ";s:31:"feed.service_process_deletefeed";s:2331:"if ($aFeed['type_id'] == 'poke') {
    $aPokeData = Phpfox::getService('poke')->getPokeData($aFeed['item_id']);
    if (isset($aPokeData['user_id'])) {
        $aFeed['parent_user_id'] = $aPokeData['user_id'];
    }
} 
 defined('PHPFOX') or exit('NO DICE!');

if (Phpfox_Request::instance()->get('module') == 'pages' && !empty($aFeed['parent_user_id'])) {
    $check = Phpfox::getService('pages')->checkIfPageUser($aFeed['parent_user_id']);
    if($check) {
        $aPage = Phpfox::getService('pages')->getPage($aFeed['parent_user_id']);
        if (isset($aPage['page_id']) && Phpfox::getService('pages')->isAdmin($aPage)) {
            define('PHPFOX_FEED_CAN_DELETE', true);
        }
    }
}

if(in_array($sType, ['pages_photo', 'pages_cover_photo']) && isset($aFeed['user_id'])) {
    $pageUser = Phpfox::getService('user')->getUser($aFeed['user_id'], 'profile_page_id');
    $aPage = Phpfox::getService('pages')->getPage($pageUser['profile_page_id']);
    if (isset($aPage['page_id']) && Phpfox::getService('pages')->isAdmin($aPage)) {
        define('PHPFOX_FEED_CAN_DELETE', true);
    }
} 
 defined('PHPFOX') or exit('NO DICE!');

if (Phpfox_Request::instance()->get('module') == 'event') {
    $aEvent = Phpfox::getService('event')->getForEdit($aFeed['parent_user_id'], true);
    if (isset($aEvent['event_id']) && $aEvent['user_id'] == Phpfox::getUserId()) {
        define('PHPFOX_FEED_CAN_DELETE', true);
    }
} 
 defined('PHPFOX') or exit('NO DICE!');

if (Phpfox_Request::instance()->get('module') == 'groups' && !empty($aFeed['parent_user_id'])) {
    $check = Phpfox::getService('groups')->checkIfGroupUser($aFeed['parent_user_id']);
    if($check) {
        $aGroup = Phpfox::getService('groups')->getPage($aFeed['parent_user_id']);
        if (isset($aGroup['page_id']) && Phpfox::getService('groups')->isAdmin($aGroup)) {
            define('PHPFOX_FEED_CAN_DELETE', true);
        }
    }
}

if(in_array($sType, ['groups_photo', 'groups_cover_photo']) && isset($aFeed['user_id'])) {
    $groupUser = Phpfox::getService('user')->getUser($aFeed['user_id'], 'profile_page_id');
    $aGroup = Phpfox::getService('groups')->getPage($groupUser['profile_page_id']);
    if (isset($aGroup['page_id']) && Phpfox::getService('groups')->isAdmin($aGroup)) {
        define('PHPFOX_FEED_CAN_DELETE', true);
    }
} 
 ";s:35:"comment.service_comment_massmail__1";s:329:"if (defined('PHPFOX_IS_PAGES_VIEW') && PHPFOX_IS_PAGES_VIEW) {
    foreach ($aRows as &$aRow) {
        if ($iPageId = Phpfox::getService('user')->getUser($aRow['owner_user_id'], 'u.profile_page_id')) {
            $aRow['user_id'] = Phpfox::getService('pages')->getPageOwnerId($iPageId['profile_page_id']);
        }
    }
} 
 ";s:40:"core.template_block_upload_form_action_1";s:990:"defined('PHPFOX') or exit('NO DICE!');

if (defined('PHPFOX_IS_PAGES_ADD') && PHPFOX_IS_PAGES_ADD && Phpfox::getService('pages')->isAdmin($this->_aVars['aForms'])) {
    echo '<a role="button" class="text-uppercase fw-bold change_photo" onclick="tb_show(\'' . _p('edit_thumbnail') . '\', $.ajaxBox(\'pages.cropme\', \'height=400&width=500&id=' . $this->_aVars['aForms']['page_id'] . '\'))"><i class="ico ico-text-file-edit"></i>&nbsp;&nbsp;&nbsp;' . _p('edit_thumbnail') . '</a>';
} 
 defined('PHPFOX') or exit('NO DICE!');

if (defined('PHPFOX_IS_GROUPS_ADD') && PHPFOX_IS_GROUPS_ADD && Phpfox::getService('groups')->isAdmin($this->_aVars['aForms'])) {
    echo '<a role="button" class="text-uppercase fw-bold change_photo" onclick="tb_show(\'' . _p('groups_edit_thumbnail') . '\', $.ajaxBox(\'groups.cropme\', \'height=400&width=500&id=' . $this->_aVars['aForms']['page_id'] . '\'))"><i class="ico ico-text-file-edit"></i>&nbsp;&nbsp;&nbsp;' . _p('groups_edit_thumbnail') . '</a>';
} 
 ";s:35:"feed.service_feed_get_custom_module";s:4721:"if (!defined('PHPFOX_IS_PAGES_VIEW') && !empty($aReturn) && (defined('PHPFOX_CHECK_FOR_UPDATE_FEED') || defined('PHPFOX_CHECK_FEEDS_FOR_PAGES'))) {
    static $cachedPageMembers = [];
    static $cachedPageUserIds = [];

    $iPageId = !empty($aReturn['parent_user']['parent_profile_page_id']) ? $aReturn['parent_user']['parent_profile_page_id'] : 0;
    if (empty($iPageId)) {
        if (in_array($aReturn['type_id'], ['pages_photo', 'pages_cover_photo'])) {
            if (!isset($cachedPageUserIds[$aReturn['user_id']])) {
                $aPageUser = Phpfox::getService('user')->getUser($aReturn['user_id'], 'u.profile_page_id');
                $iPageId = $cachedPageUserIds[$aReturn['user_id']] = (int)$aPageUser['profile_page_id'];
            } else {
                $iPageId = $cachedPageUserIds[$aReturn['user_id']];
            }
        } elseif ($aReturn['type_id'] == 'pages_comment') {
            $iPageId = $aReturn['custom_data_cache']['parent_profile_page_id'];
        } elseif (!in_array($aReturn['type_id'], ['user_photo', 'user_cover', 'groups_photo', 'groups_cover_photo'])) {
            $iPageId = (int)db()->select('parent_user_id')
                ->from(':pages_feed')
                ->where([
                    'type_id' => $aReturn['type_id'],
                    'item_id' => $aReturn['item_id']
                ])->executeField();
        }
    }
    if (!empty($iPageId)) {
        $isFeedDetail = $this->request()->getInt('status-id')
            || $this->request()->getInt('comment-id')
            || $this->request()->getInt('link-id')
            || $this->request()->getInt('poke-id')
            || $this->request()->getInt('feed');

        if (!$isFeedDetail) {
            if (!isset($cachedPageMembers[$iPageId])) {
                $iItemType = (int)db()->select('item_type')
                    ->from(':pages')
                    ->where([
                        'page_id' => $iPageId,
                    ])->executeField();
                $cachedPageMembers[$iPageId] = $iItemType == 0 ? (Phpfox::getService('pages')->isMember($iPageId) ? 1 : 0) : -1;
            }
            if ($cachedPageMembers[$iPageId] == 0) {
                array_pop($aFeeds);
            }
        }
    }
} 
 if (!defined('PHPFOX_IS_PAGES_VIEW') && !empty($aReturn) && (defined('PHPFOX_CHECK_FOR_UPDATE_FEED') || defined('PHPFOX_CHECK_FEEDS_FOR_GROUPS'))) {
    static $cachedGroupMembers = [];
    static $cachedGroupUserIds = [];

    $iGroupId = !empty($aReturn['parent_user']['parent_profile_page_id']) ? $aReturn['parent_user']['parent_profile_page_id'] : 0;
    if (empty($iGroupId)) {
        if (in_array($aReturn['type_id'], ['groups_photo', 'groups_cover_photo'])) {
            if (!isset($cachedGroupUserIds[$aReturn['user_id']])) {
                $aGroupUser = Phpfox::getService('user')->getUser($aReturn['user_id'], 'u.profile_page_id');
                $iGroupId = $cachedGroupUserIds[$aReturn['user_id']] = (int)$aGroupUser['profile_page_id'];
            } else {
                $iGroupId = $cachedGroupUserIds[$aReturn['user_id']];
            }
        } elseif ($aReturn['type_id'] == 'groups_comment') {
            $iGroupId = $aReturn['custom_data_cache']['parent_profile_page_id'];
        } elseif (!in_array($aReturn['type_id'], ['user_photo', 'user_cover', 'pages_photo', 'pages_cover_photo'])) {
            $iGroupId = (int)db()->select('parent_user_id')
                ->from(':pages_feed')
                ->where([
                    'type_id' => $aReturn['type_id'],
                    'item_id' => $aReturn['item_id']
                ])->executeField();
        }
    }
    if (!empty($iGroupId)) {
        $isFeedDetail = $this->request()->getInt('status-id')
            || $this->request()->getInt('comment-id')
            || $this->request()->getInt('link-id')
            || $this->request()->getInt('poke-id')
            || $this->request()->getInt('feed');

        if (!$isFeedDetail) {
            if (!isset($cachedGroupMembers[$iGroupId])) {
                $iItemType = (int)db()->select('item_type')
                    ->from(':pages')
                    ->where([
                        'page_id' => $iGroupId,
                    ])->executeField();
                $cachedGroupMembers[$iGroupId] = $iItemType == 1 ? (Phpfox::getService('groups')->isMember($iGroupId) ? 1 : 0) : -1;
            }
            if ($cachedGroupMembers[$iGroupId] == 0) {
                array_pop($aFeeds);
            }
        }
    }
} 
 if ($aReturn && Phpfox::isAppActive('P_Reaction')) {
    $iLast = count($aFeeds) - 1;
    if ($iLast >= 0) {
        Phpfox::getService('preaction')->getReactionsPhrase($aFeeds[$iLast]);
    }
} 
 ";s:38:"feed.service_feed_get_feed_actions_end";s:423:"if (Phpfox::getService('pages')->isLoginAsPage() && $aActions['can_share']) {
    $aActions['can_share'] = false;
    $aActions['total_action']--;
} 
 defined('PHPFOX') or exit('NO DICE!');

if ($aFeed['type_id'] == 'blog' && isset($aFeed['can_share_draft']) && $aFeed['can_share_draft'] == false) {
    if ($aActions['can_share']) {
        $aActions['can_share'] = false;
        $aActions['total_action']--;
    }
} 
 ";s:34:"feed.service_process_addcomment__1";s:3074:"if (isset($this->_aCallback['module']) && !empty($this->_aCallback['notification']) && !Phpfox::getUserBy('profile_page_id') && $this->_aCallback['module'] == 'pages' && Phpfox::getUserId() != $this->_aCallback['email_user_id']) {
    $sLink = $this->_aCallback['link'] . 'comment-id_' . $iStatusId . '/';

    // get and send email/notification to all admins of page
    $aAdmins = Phpfox::getService('pages')->getPageAdmins($this->_aCallback['item_id']);

    foreach ($aAdmins as $aAdmin) {
        if (Phpfox::getUserBy('user_id') == $aAdmin['user_id'] || (!empty($this->_aCallback['notification']) && $aAdmin['user_id'] == $this->_aCallback['email_user_id'])) {
            continue;
        }
        Phpfox::getLib('mail')->to($aAdmin['user_id'])
            ->subject(['email_full_name_wrote_a_comment_on_page_title', [
                'full_name' => Phpfox::getUserBy('full_name'),
                'title' => $this->_aCallback['item_title']
            ]])
            ->message(['full_name_wrote_a_comment_on_page_link', [
                'full_name' => Phpfox::getUserBy('full_name'),
                'title' => $this->_aCallback['item_title'],
                'link' => $sLink
            ]])
            ->notification('pages.email_notification')
            ->send();

        if (Phpfox::isModule('notification')) {
            Phpfox::getService('notification.process')->add('pages_comment', $iStatusId, $aAdmin['user_id']);
        }
    }
} 
 if (isset($this->_aCallback['module']) && $this->_aCallback['module'] == 'groups' && Phpfox::getUserId() != $this->_aCallback['email_user_id']) {
    $sLink = $this->_aCallback['link'] . 'comment-id_' . $iStatusId . '/';

    // get and send email/notification to all admins of group
    $aGroup = \Phpfox::getService('groups')->getPage($this->_aCallback['item_id']);
    $aAdmins = Phpfox::getService('groups')->getPageAdmins($this->_aCallback['item_id']);
    foreach ($aAdmins as $aAdmin) {
        if (Phpfox::getUserId() == $aAdmin['user_id']) {
            continue;
        }
        Phpfox::getLib('mail')->to($aAdmin['user_id'])
            ->subject(['email_full_name_wrote_a_comment_on_group_subject', [
                'full_name' => \Phpfox::getUserBy('full_name'),
                'title' => $aGroup['title']
            ]])
            ->message(['full_name_wrote_a_comment_on_group_link', [
                'full_name' => \Phpfox::getUserBy('full_name'),
                'title' => $aGroup['title'],
                'link' => $sLink
            ]])
            ->notification('groups.email_notification')
            ->send();
        if (Phpfox::isModule('notification')) {
            Phpfox::getService('notification.process')->add('groups_comment', $iStatusId, $aAdmin['user_id']);
        }
    }
} 
 if (Phpfox::isAppActive('P_StatusBg') && !empty($aVals['status_background_id'])) {
    Phpfox::getService('pstatusbg.process')->addBackgroundForStatus($this->_aCallback['feed_id'], $iStatusId,
        $aVals['status_background_id'], Phpfox::getUserId(), $this->_aCallback['module']);
} 
 ";s:35:"feed.service_process_deletefeed_end";s:582:"defined('PHPFOX') or exit('NO DICE!');

if ($aFeed['type_id'] == 'pages_comment' && $aFeed['item_id']) {
    db()->delete(':pages_feed', ['type_id' => 'pages_comment', 'item_id' => $aFeed['item_id']]);
    db()->delete(':pages_feed_comment', ['feed_comment_id' => $aFeed['item_id']]);
} 
 defined('PHPFOX') or exit('NO DICE!');

if ($aFeed['type_id'] == 'groups_comment' && $aFeed['item_id']) {
    db()->delete(':pages_feed', ['type_id' => 'groups_comment', 'item_id' => $aFeed['item_id']]);
    db()->delete(':pages_feed_comment', ['feed_comment_id' => $aFeed['item_id']]);
} 
 ";s:33:"friend.component_block_search_get";s:3863:"defined('PHPFOX') or exit('NO DICE!');

if (count($aFriends) &&
    ((!PHPFOX_IS_AJAX && defined('PHPFOX_PAGES_EDIT_ID') && PHPFOX_PAGES_EDIT_ID > 0) ||
        (PHPFOX_IS_AJAX && Phpfox_Request::instance()->get('friend_item_id') && $this->getParam('friend_module_id') == 'pages'))
) {
    defined('PHPFOX_PAGES_EDIT_ID') or define('PHPFOX_PAGES_EDIT_ID',
        Phpfox_Request::instance()->get('friend_item_id'));
    $aInvites = Phpfox::getService('pages')->getCurrentInvites(PHPFOX_PAGES_EDIT_ID);
    list(, $aMembers) = Phpfox::getService('pages')->getMembers(PHPFOX_PAGES_EDIT_ID);

    foreach ($aFriends as $iKey => $aFriend) {
        if (is_array($aInvites) && isset($aInvites[$aFriend['user_id']])) {
            $aFriends[$iKey]['is_active'] = _p('invited');
            continue;
        }
        if (is_array($aMembers) && in_array($aFriend['user_id'], array_column($aMembers, 'user_id'))) {
            $aFriends[$iKey]['is_active'] = _p('liked');
        }
    }
} 
 defined('PHPFOX') or exit('NO DICE!');

if (count($aFriends)) {
    $iEventId = $this->getParam('friend_item_id');
    $aEvent = Phpfox::getService('event')->getEventSimple($iEventId);
    if ($aEvent['module_id'] == 'groups') {
        $iGroupRegMethod = db()->select('reg_method')
            ->from(':pages')
            ->where(['page_id' => $aEvent['item_id'], 'item_type' => 1])
            ->executeField();

        if ((int)$iGroupRegMethod != 0) {
            list(, $aMembers) = Phpfox::getService('groups')->getMembers($aEvent['item_id']);
            foreach ($aFriends as $iKey => $aFriend) {
                if (!array_search($aFriend['user_id'], array_column($aMembers, 'user_id'))) {
                    unset($aFriends[$iKey]);
                }
            }
        }
    }
} 
 defined('PHPFOX') or exit('NO DICE!');

if (count($aFriends) &&
    ((!PHPFOX_IS_AJAX && defined('PHPFOX_PAGES_EDIT_ID') && PHPFOX_PAGES_EDIT_ID > 0) ||
        (PHPFOX_IS_AJAX && Phpfox_Request::instance()->get('friend_item_id')) && $this->getParam('friend_module_id') == 'groups')
) {
    defined('PHPFOX_PAGES_EDIT_ID') or define('PHPFOX_PAGES_EDIT_ID',
        Phpfox_Request::instance()->get('friend_item_id'));
    $aInvites = Phpfox::getService('groups')->getCurrentInvitesForGroup(PHPFOX_PAGES_EDIT_ID);
    list(, $aMembers) = Phpfox::getService('groups')->getMembers(PHPFOX_PAGES_EDIT_ID);

    foreach ($aFriends as $iKey => $aFriend) {
        if (is_array($aInvites) && isset($aInvites[$aFriend['user_id']])) {
            $aFriends[$iKey]['is_active'] = _p('invited');
            continue;
        }
        if (is_array($aMembers) && in_array($aFriend['user_id'], array_column($aMembers, 'user_id'))) {
            $aFriends[$iKey]['is_active'] = _p('joined');
        }
    }
} 
 defined('PHPFOX') or exit('NO DICE!');

if (count($aFriends)) {
    if ($this->getParam('friend_module_id') == 'marketplace') {
        $iListingId = $this->getParam('friend_item_id');
        $aListing = Phpfox::getService('marketplace')->getForEdit($iListingId);
        if ($aListing['module_id'] == 'groups') {
            $iGroupRegMethod = db()->select('reg_method')
                ->from(':pages')
                ->where(['page_id' => $aListing['item_id'], 'item_type' => 1])
                ->executeField();

            if ((int)$iGroupRegMethod != 0) {
                list(, $aMembers) = Phpfox::getService('groups')->getMembers($aListing['item_id']);
                $aMemberIds = [];
                foreach  ($aMembers as $aMember) {
                    $aMemberIds[] = $aMember['user_id'];
                }
                foreach ($aFriends as $iKey => $aFriend) {
                    if (!in_array($aFriend['user_id'], $aMemberIds)) {
                        unset($aFriends[$iKey]);
                    }
                }
            }
        }
    }
} 
 ";s:17:"get_module_blocks";s:2835:"if (defined('PHPFOX_IS_PAGES_VIEW') && defined('PHPFOX_PAGES_ITEM_TYPE') && PHPFOX_PAGES_ITEM_TYPE == 'pages' && $iId == 2) {
    $aBlocks[2][] = ['type_id' => 0, 'component' => 'pages.pending', 'params' => []];
}

$sModuleName = Phpfox::getLib('module')->getModuleName();
if ($iId == 11 && Phpfox_Component::__getParam('show_page_cover')) {
    $aBlocks[11][] = ['type_id' => 0, 'component' => 'pages.photo', 'params' => [
        'aPage' => Phpfox_Component::__getParam('page_to_show_cover')
    ]];
} 
 if (defined('PHPFOX_IS_PAGES_VIEW') && defined('PHPFOX_PAGES_ITEM_TYPE') && PHPFOX_PAGES_ITEM_TYPE == 'groups' && $iId == 2) {
    $aBlocks[2][] = ['type_id' => 0, 'component' => 'groups.pending', 'params' => []];
}

$sModuleName = Phpfox::getLib('module')->getModuleName();
if ($iId == 11 && Phpfox_Component::__getParam('show_group_cover')) {
    $aBlocks[11][] = ['type_id' => 0, 'component' => 'groups.photo', 'params' => [
        'aPage' => Phpfox_Component::__getParam('group_to_show_cover')
    ]];
} 
 if (Phpfox::isAppActive('Core_BetterAds') && !Phpfox::isAdminPanel() && $this->_sModule != 'ad' && isset($iId)) {
    $toggle = [];
    if(Phpfox::getParam('ad.better_ads_collapse_setting_480')) {
        $toggle[] = 480;
    }
    if(Phpfox::getParam('ad.better_ads_collapse_setting_480_767')) {
        $toggle[] = 767;
    }
    if(Phpfox::getParam('ad.better_ads_collapse_setting_767_992')) {
        $toggle[] = 992;
    }
    $aBlocks[$iId][] = [
        'type_id' => 0,
        'component' => 'ad.display',
        'ordering' => 0,
        'params' => [
            'block_id' => $iId,
            'toggle' => $toggle
        ]
    ];
}
if (Phpfox::isAppActive('Core_BetterAds') && defined('PHPFOX_IS_AD_PREVIEW') && PHPFOX_IS_AD_PREVIEW && isset($iId)) {
    $iPreviewBlock = Phpfox_Component::__getParam('betterads_preview_block');
    if (!empty($iPreviewBlock) && $iId == $iPreviewBlock) {
        $aBlocks[$iId][] = [
            'type_id' => 0,
            'component' => 'ad.display',
            'params' => [
                'preview' => [
                    'block' => $iPreviewBlock,
                    'type_id' => Phpfox_Component::__getParam('betterads_preview_type_id'),
                    'image_temp_id' => Phpfox_Component::__getParam('betterads_preview_image'),
                    'image_tooltip_text' => Phpfox_Component::__getParam('betterads_preview_image_tooltip_text'),
                    'url_link' => Phpfox_Component::__getParam('betterads_preview_url_link'),
                    'title' => Phpfox_Component::__getParam('betterads_preview_title'),
                    'body' => Phpfox_Component::__getParam('betterads_preview_body'),
                    'ad_id' => Phpfox_Component::__getParam('betterads_preview_ad_id'),
                ]
            ]
        ];
    }

} 
 ";s:38:"link.component_ajax_addviastatusupdate";s:5280:"if (array_key_exists('callback_module', $aVals) && $aVals['callback_module'] == 'pages') {
    // temporary save content, because function send of mail clean all => cause issue when use plugin in ajax
    $content = ob_get_contents();
    ob_clean();

    // validate whom to send notification
    $aPage = Phpfox::getService('pages')->getPage($aVals['callback_item_id']);
    if ($aPage) {
        $iLinkId = Phpfox::getService('link.process')->getInsertId();
        $aLink = Phpfox::getService('link')->getLinkById($iLinkId);
        if($aLink) {
            $sLinkUrl = $aLink['redirect_link'];
            $postedUserFullName = Phpfox::getUserBy('full_name');

            $pageUserId = Phpfox::getService('pages')->getUserId($aPage['page_id']);
            if ($this->get('custom_pages_post_as_page')) {
                $pageUser = Phpfox::getService('user')->getUser($pageUserId, 'full_name');
                if ($pageUser) {
                    $postedUserFullName = $pageUser['full_name'];
                }
            }

            // get all admins (include owner), send email and notification
            $aAdmins = Phpfox::getService('pages')->getPageAdmins($aVals['callback_item_id']);
            foreach ($aAdmins as $aAdmin) {
                if ($aLink['user_id'] == $aAdmin['user_id']) { // is owner of link
                    continue;
                }

                if ($aPage['user_id'] == $aAdmin['user_id']) { // is owner of page
                    if ($aLink['user_id'] == $pageUserId) { // post as page
                        continue;
                    }
                    $varPhraseTitle = 'full_name_posted_a_link_on_your_page_title';
                    $varPhraseLink = 'full_name_posted_a_link_on_your_page_link';
                } else {
                    $varPhraseTitle = 'full_name_posted_a_link_on_page_title';
                    $varPhraseLink = 'full_name_posted_a_link_on_page_link';
                }

                $aSubjectPhrase = [$varPhraseTitle, [
                    'full_name' => $postedUserFullName,
                    'title' => $aPage['title']
                ]];
                $aMessagePhrase = [$varPhraseLink, [
                    'full_name' => $postedUserFullName,
                    'title' => $aPage['title'],
                    'link' => $sLinkUrl
                ]];

                Phpfox::getLib('mail')->to($aAdmin['user_id'])
                    ->subject($aSubjectPhrase)
                    ->message($aMessagePhrase)
                    ->notification('pages.email_notification')
                    ->send();

                if (Phpfox::isModule('notification')) {
                    Phpfox::getService('notification.process')->add('pages_comment_link', $iLinkId, $aAdmin['user_id']);
                }
            }
        }
    }

    // return content
    echo $content;
} 
 if (array_key_exists('callback_module', $aVals) && $aVals['callback_module'] == 'groups') {
    // temporary save content, because function send of mail clean all => cause issue when use plugin in ajax
    $content = ob_get_contents();
    ob_clean();

    // validate whom to send notification
    $aGroup = Phpfox::getService('groups')->getPage($aVals['callback_item_id']);
    if ($aGroup) {
        $iLinkId = Phpfox::getService('link.process')->getInsertId();
        $aLink = Phpfox::getService('link')->getLinkById($iLinkId);
        if($aLink) {
            $sLinkUrl = $aLink['redirect_link'];
            $postedUserFullName = Phpfox::getUserBy('full_name');

            // get all admins (include owner), send email and notification
            $aAdmins = Phpfox::getService('groups')->getPageAdmins($aVals['callback_item_id']);
            foreach ($aAdmins as $aAdmin) {
                if ($aLink['user_id'] == $aAdmin['user_id']) { // is owner of link
                    continue;
                }

                if ($aGroup['user_id'] == $aAdmin['user_id']) { // is owner of group
                    $varPhraseTitle = 'full_name_posted_a_link_on_your_group_title';
                    $varPhraseLink = 'full_name_posted_a_link_on_your_group_link';
                } else {
                    $varPhraseTitle = 'email_full_name_posted_a_link_on_group_subject';
                    $varPhraseLink = 'full_name_posted_a_link_on_group_link';
                }

                $aSubjectPhrase = [$varPhraseTitle, [
                    'full_name' => $postedUserFullName,
                    'title' => $aGroup['title']
                ]];
                $aMessagePhrase = [$varPhraseLink, [
                    'full_name' => $postedUserFullName,
                    'title' => $aGroup['title'],
                    'link' => $sLinkUrl
                ]];

                Phpfox::getLib('mail')->to($aAdmin['user_id'])
                    ->subject($aSubjectPhrase)
                    ->message($aMessagePhrase)
                    ->notification('groups.email_notification')
                    ->send();

                if (Phpfox::isModule('notification')) {
                    Phpfox::getService('notification.process')->add('groups_comment_link', $iLinkId, $aAdmin['user_id']);
                }
            }
        }
    }

    // return content
    echo $content;
} 
 ";s:43:"mail.component_ajax_compose_process_success";s:74:"if (!empty($sType) && $sType == 'claim-page') {
    $this->reload();
} 
 ";s:33:"photo.component_ajax_process_done";s:2454:"if (isset($aCallback['module']) && $aCallback['module'] == 'pages') {
    // temporary save content, because function send of mail clean all => cause issue when use plugin in ajax
    $content = ob_get_contents();
    ob_clean();

    // validate whom to send notification
    $aPage = Phpfox::getService('pages')->getPage($aPhoto['group_id']);
    if ($aPage && (int)$aPhoto['view_id'] == 0) {
        $sLink = Phpfox::getService('pages')->getUrl($aPage['page_id'], $aPage['title'], $aPage['vanity_url']);
        $postedUserFullName = Phpfox::getUserBy('full_name');

        $pageUserId = Phpfox::getService('pages')->getUserId($aPage['page_id']);
        if ($this->get('custom_pages_post_as_page')) {
            $pageUser = Phpfox::getService('user')->getUser($pageUserId, 'full_name');
            if ($pageUser) {
                $postedUserFullName = $pageUser['full_name'];
            }
        }

        // get all admins (include owner) and send notification
        $aAdmins = Phpfox::getService('pages')->getPageAdmins($aPage['page_id']);
        foreach ($aAdmins as $aAdmin) {
            if (($aPhoto['user_id'] == $aAdmin['user_id'])
                || ($aPage['user_id'] == $aAdmin['user_id'] && $aPhoto['user_id'] == $pageUserId)) { // is owner of photo
                continue;
            }

            $isOwner = $aPage['user_id'] == $aAdmin['user_id'];
            $varPhraseTitle = $isOwner ? 'pages_email_full_name_post_some_images_on_your_page_title' : 'email_full_name_post_some_images_on_page_title';
            $varPhraseLink = $isOwner ? 'full_name_post_some_images_on_your_page_title_link' : 'full_name_post_some_images_on_page_title_link';

            Phpfox::getLib('mail')->to($aAdmin['user_id'])
                ->subject([$varPhraseTitle, [
                    'full_name' => $postedUserFullName,
                    'title' => $aPage['title']
                ]])
                ->message([$varPhraseLink, [
                    'full_name' => $postedUserFullName,
                    'link' => $sLink,
                    'title' => $aPage['title']
                ]])
                ->notification('pages.email_notification')
                ->send();

            if (Phpfox::isModule('notification')) {
                Phpfox::getService('notification.process')->add('pages_post_image', $aPhoto['photo_id'], $aAdmin['user_id']);
            }
        }
    }

    // return content
    echo $content;
} 
 ";s:65:"photo.component_service_callback_getactivityfeed__get_item_before";s:807:"if (defined('PHPFOX_IS_PAGES_VIEW') && defined('PHPFOX_PAGES_ITEM_TYPE') && PHPFOX_PAGES_ITEM_TYPE == 'pages') {
    $sFeedTable = 'pages_feed';
} else {
    if ($iFeedId && isset($aPhotoIte['module_id']) && $aPhotoIte['module_id'] == 'pages') {
        $sFeedTable = 'pages_feed';
    }
} 
 if (defined('PHPFOX_IS_EVENT_VIEW')) {
    $sFeedTable = 'event_feed';
} else {
    if ($iFeedId && isset($aPhotoIte['module_id']) && $aPhotoIte['module_id'] == 'event') {
        $sFeedTable = 'event_feed';
    }
} 
 if (defined('PHPFOX_IS_PAGES_VIEW') && defined('PHPFOX_PAGES_ITEM_TYPE') && PHPFOX_PAGES_ITEM_TYPE == 'groups') {
    $sFeedTable = 'pages_feed';
} else {
    if ($iFeedId && isset($aPhotoIte['module_id']) && $aPhotoIte['module_id'] == 'groups') {
        $sFeedTable = 'pages_feed';
    }
} 
 ";s:32:"photo.service_process_approve__1";s:1720:"$aPage = Phpfox::getService('pages')->getPage($aPhoto['group_id']);

if ($aPage) {
    $sLink = Phpfox::getService('pages')->getUrl($aPage['page_id'], $aPage['title'], $aPage['vanity_url']);
    $postedUserFullName = $aPhoto['full_name'];
    $pageUserId = Phpfox::getService('pages')->getUserId($aPage['page_id']);

    // get all admins (include owner) and send notification
    $aAdmins = Phpfox::getService('pages')->getPageAdmins($aPage['page_id']);
    foreach ($aAdmins as $aAdmin) {
        // is owner of photo or approved person is page admin
        if ($aPhoto['user_id'] == $aAdmin['user_id'] || $aAdmin['user_id'] == Phpfox::getUserId()) {
            continue;
        }

        $isOwner = $aPage['user_id'] == $aAdmin['user_id'];
        $varPhraseTitle = $isOwner ? 'pages_email_full_name_post_some_images_on_your_page_title' : 'email_full_name_post_some_images_on_page_title';
        $varPhraseLink = $isOwner ? 'full_name_post_some_images_on_your_page_title_link' : 'full_name_post_some_images_on_page_title_link';

        Phpfox::getLib('mail')->to($aAdmin['user_id'])
            ->subject([$varPhraseTitle, [
                'full_name' => $postedUserFullName,
                'title' => $aPage['title']
            ]])
            ->message([$varPhraseLink, [
                'full_name' => $postedUserFullName,
                'link' => $sLink,
                'title' => $aPage['title']
            ]])
            ->notification('pages.email_notification')
            ->send();

        if (Phpfox::isModule('notification')) {
            Phpfox::getService('notification.process')->add('pages_post_image', $aPhoto['photo_id'], $aAdmin['user_id'], $aPhoto['user_id']);
        }
    }
} 
 ";s:47:"photo.service_process_make_profile_picture__end";s:480:"if (\Phpfox::getUserBy('profile_page_id')) {
    if (!isset($sActualFile)) {
        $sActualFile = Phpfox::getLib('image.helper')->display(array(
                'server_id' => $aPhoto['server_id'],
                'path' => 'photo.url_photo',
                'file' => $aPhoto['destination'],
                'suffix' => '_1024',
                'return_url' => true
            )
        );
    }
    \Phpfox::getService('pages.process')->setProfilePicture($sActualFile);
} 
 ";s:30:"photo.set_cover_photo_for_item";s:634:"if (!empty($aVals['module_id']) && !empty($aVals['item_id']) && $aVals['module_id'] == 'pages' && Phpfox::isAppActive('Core_Pages')) {
    if (!Phpfox::getService('pages.process')->setCoverPhoto($aVals['item_id'], $iId, true)) {
        return $this->error(_p('Cannot set cover photo for this page.'));
    }
} 
 if (!empty($aVals['module_id']) && !empty($aVals['item_id']) && $aVals['module_id'] == 'groups' && Phpfox::isAppActive('PHPfox_Groups')) {
    if (!Phpfox::getService('groups.process')->setCoverPhoto($aVals['item_id'], $iId, true)) {
        return $this->error(_p('Cannot set cover photo for this group.'));
    }
} 
 ";s:27:"phpfox_assign_ajax_browsing";s:1009:"if (defined('PHPFOX_IS_PAGES_VIEW')
    && defined('PHPFOX_PAGES_ITEM_TYPE')
    && PHPFOX_PAGES_ITEM_TYPE == 'pages'
    && !empty($oTpl->getVar('aSubMenus'))
    && !empty($sModule)
    && !Phpfox::getService('pages')->isActiveIntegration($sModule)) {
    $oTpl->assign('aSubMenus', null);
} 
 // Check if CDN is enabled
if (setting('pf_cdn_enabled')) {

    // Attach an event to the CDN bootloader to our Model
    new Core\Event([
        'lib_phpfox_cdn' => 'Apps\PHPfox_CDN\Model\CDN'
    ]);
} 
 if (defined('PHPFOX_IS_PAGES_VIEW')
    && defined('PHPFOX_PAGES_ITEM_TYPE')
    && PHPFOX_PAGES_ITEM_TYPE == 'groups'
    && !empty($oTpl->getVar('aSubMenus'))
    && !empty($sModule)
    && !Phpfox::getService('groups')->isActiveIntegration($sModule)) {
    $oTpl->assign('aSubMenus', null);
} 
 if (!empty($aBreadCrumbs) && empty($aBreadCrumbTitle)) {
    list($value, $key) = [end($aBreadCrumbs), key($aBreadCrumbs)];
    unset($aBreadCrumbs[$key]);
    $aBreadCrumbTitle = [$value, $key, 1];
} 
 ";s:40:"profile.template_block_upload-cover-form";s:635:"if (defined('PHPFOX_IS_PAGES_VIEW')
    && defined('PHPFOX_PAGES_ITEM_TYPE')
    && PHPFOX_PAGES_ITEM_TYPE == 'pages'
    && !empty($this->_aVars['aPage'])
    && !empty($this->_aVars['bCanChangeCover'])) {
    echo '<input type="hidden" name="val[page_id]" value="' . $this->_aVars['aPage']['page_id'] . '">';
} 
 if (defined('PHPFOX_IS_PAGES_VIEW')
    && defined('PHPFOX_PAGES_ITEM_TYPE')
    && PHPFOX_PAGES_ITEM_TYPE == 'groups'
    && !empty($this->_aVars['aPage'])
    && !empty($this->_aVars['bCanChangeCover'])) {
    echo '<input type="hidden" name="val[groups_id]" value="' . $this->_aVars['aPage']['page_id'] . '">';
} 
 ";s:3:"run";s:1368:"defined('PHPFOX') or exit('NO DICE!');

$iProfilePageId = Phpfox::getUserBy('profile_page_id');
if (!PHPFOX_IS_AJAX && $iProfilePageId > 0 && Phpfox::getLib('pages.facade')->getPageItemType($iProfilePageId) == 'pages') {
    $bSend = true;
    if (defined('PHPFOX_IS_PAGE_ADMIN')) {
        $bSend = false;
    } else {
        $aPage = Phpfox::getService('pages')->getPage(Phpfox::getUserBy('profile_page_id'));
        $sReq1 = Phpfox_Request::instance()->get('req1');

        if (!Phpfox::getService('pages')->isInPage()) {
            Phpfox_Url::instance()->forward(Phpfox::getService('pages')->getUrl($aPage['page_id'], $aPage['title'],
                $aPage['vanity_url']));
        }
    }
} 
 defined('PHPFOX') or exit('NO DICE!');

$iProfilePageId = Phpfox::getUserBy('profile_page_id');
if (!PHPFOX_IS_AJAX && $iProfilePageId > 0 && Phpfox::getLib('pages.facade')->getPageItemType($iProfilePageId) == 'groups') {
    $bSend = true;
    $aPage = \Phpfox::getService('groups')->getPage($iProfilePageId);
    $sReq1 = Phpfox_Request::instance()->get('req1');
    if (defined('PHPFOX_IS_PAGE_ADMIN')) {
        $bSend = false;
    }

    if ($bSend && !\Phpfox::getService('groups')->isInPage()) {
        Phpfox_Url::instance()->forward(Phpfox::getService('groups')->getUrl($aPage['page_id'], $aPage['title'],
            $aPage['vanity_url']));
    }
} 
 ";s:29:"user.service_process_update_1";s:845:"if(Phpfox::isAppActive('Core_Pages') && !empty($aInsert['full_name']) && !empty($aInsert['prev_full_name']) && ($aInsert['full_name'] !== $aInsert['prev_full_name']))
{
    $admins = db()->select('p.page_id AS page_id_owner, pa.page_id AS page_id_admin')
        ->from(Phpfox::getT('user'), 'u')
        ->leftJoin(Phpfox::getT('pages'), 'p', 'p.user_id = u.user_id')
        ->leftJoin(Phpfox::getT('pages_admin'), 'pa', 'pa.user_id = u.user_id')
        ->where('u.user_id = '. (int)$iUserId)
        ->execute('getSlaveRows');
    foreach ($admins as $admin)
    {
        $targetId = !empty($admin['page_id_owner']) ? $admin['page_id_owner'] : (!empty($admin['page_id_admin']) ? $admin['page_id_admin'] : 0);
        if(!empty($targetId))
        {
            $this->cache()->remove('pages_' . $targetId . '_admins');
        }
    }
} 
 ";s:32:"validator.admincp_settings_pages";s:187:"$aValidation = [
    'pages_limit_per_category' => [
        'title' => _p('validation_pages_limit_per_category_phrase'),
        'def' => 'int:required',
        'min' => 0
    ],
]; 
 ";s:37:"validator.admincp_user_settings_pages";s:614:"$aValidation = [
    'max_upload_size_pages' => [
        'title' => _p('validation_max_upload_size_pages_phrase'),
        'def' => 'int:required',
        'min' => 0,
    ],
    'points_pages' => [
        'title' => _p('validation_points_pages_phrase'),
        'min' => 0,
        'def' => 'int:required',
    ],
    'pages_flood_control' => [
        'title' => _p('validation_flood_control_phrase'),
        'min' => 0,
        'def' => 'int:required',
    ],
    'max_pages_created' => [
        'title' => _p('validation_max_pages_created'),
        'min' => 0,
        'def' => 'int:required'
    ]
]; 
 ";s:18:"get_master_phrases";s:22:"$aOut[] = 'emoji'; 
 ";s:37:"validator.admincp_user_settings_music";s:1635:"$aValidation = [
    'max_songs_per_upload'      => [
        'def'   => 'int:required',
        'min'   => '1',
        'title' => _p('"Maximum number of songs per upload" must be greater than 0'),
    ],
    'points_music_song'         => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"Activity points" must be greater than or equal to 0'),
    ],
    'music_max_file_size'       => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"Maximum file size of songs uploaded" must be greater than or equal to 0'),
    ],
    'music_album_sponsor_price' => [
        'def'   => 'currency',
        'min'   => '0',
        'title' => _p('"Sponsor album price" must be greater than or equal to 0'),
    ],
    'music_song_sponsor_price'  => [
        'def'   => 'currency',
        'min'   => '0',
        'title' => _p('"Sponsor song price" must be greater than or equal to 0'),
    ],
    'points_music_playlist'     => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"Activity points" must be greater than or equal to 0'),
    ],
    'max_music_song_created'    => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('validator_user_group_setting_max_music_song_created'),
    ],
    'max_music_album_created'   => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('validator_user_group_setting_max_music_album_created'),
    ],
    'max_music_playlist_created' => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('validator_user_group_setting_max_music_playlist_created'),
    ]
]; 
 ";s:34:"user.template.login_header_set_var";s:291:"if (setting('m9_facebook_enabled')) {
    Phpfox::getLib('template')->assign('bCustomLogin', true);
} 
 if (Phpfox::getParam('core.enable_register_with_google') && !empty(Phpfox::getParam('core.google_oauth_client_id'))) {
    Phpfox::getLib('template')->assign('bCustomLogin', true);
} 
 ";s:37:"user.template.register_header_set_var";s:291:"if (setting('m9_facebook_enabled')) {
    Phpfox::getLib('template')->assign('bCustomLogin', true);
} 
 if (Phpfox::getParam('core.enable_register_with_google') && !empty(Phpfox::getParam('core.google_oauth_client_id'))) {
    Phpfox::getLib('template')->assign('bCustomLogin', true);
} 
 ";s:41:"user.template_controller_login_block__end";s:667:"if (setting('m9_facebook_enabled')) {
    echo '<div class="fb_login">';
    echo '<span class="fb_login_go"><span class="core-facebook-item-fb-icon"><img src="' . Phpfox::getParam('core.path_actual') . 'PF.Site/Apps/core-facebook/assets/images/fb-logo-white.png"></img></span>' . _p('sign_in_with_facebook') . '</span>';
    echo '</div>';
} 
 if (Phpfox::getParam('core.enable_register_with_google') && !empty(Phpfox::getParam('core.google_oauth_client_id'))) {
    echo Phpfox_Template::instance()->assign([
        'sPhrase' => 'sign_in_with_google',
        'sId' => 'js_google_signin_' . PHPFOX_TIME
    ])->getTemplate('user.block.google-login-button');
} 
 ";s:44:"user.template_controller_register_block__end";s:667:"if (setting('m9_facebook_enabled')) {
    echo '<div class="fb_login">';
    echo '<span class="fb_login_go"><span class="core-facebook-item-fb-icon"><img src="' . Phpfox::getParam('core.path_actual') . 'PF.Site/Apps/core-facebook/assets/images/fb-logo-white.png"></img></span>' . _p('sign_up_with_facebook') . '</span>';
    echo '</div>';
} 
 if (Phpfox::getParam('core.enable_register_with_google') && !empty(Phpfox::getParam('core.google_oauth_client_id'))) {
    echo Phpfox_Template::instance()->assign([
        'sPhrase' => 'sign_up_with_google',
        'sId' => 'js_google_signin_' . PHPFOX_TIME
    ])->getTemplate('user.block.google-login-button');
} 
 ";s:34:"validator.admincp_settings_captcha";s:196:"$aValidation = [
    'captcha_limit' => [
        'def'   => 'int:required',
        'min'   => '4',
        'max'   => '6',
        'title' => 'Captcha Limit value is number 4,5,6',
    ],
]; 
 ";s:41:"feed.component_block_edit_user_status_end";s:111:"if (!empty($module) && $module == 'event') {
    $this->template()->assign(['bLoadTagFriends' => false]);
} 
 ";s:34:"feed.template_block_comment_border";s:162:"defined('PHPFOX') or exit('NO DICE!');

if (Phpfox_Module::instance()->getFullControllerName() == 'event.index') {
    Phpfox::getBlock('event.rsvp-entry');
} 
 ";s:37:"friend.component_block_search_process";s:1152:"defined('PHPFOX') or exit('NO DICE!');

if ($sFriendModuleId == 'event') {
    $aInviteCache = Phpfox::getService('event')->isAlreadyInvited($this->getParam('friend_item_id', '0'), $aFriends);
    if (is_array($aInviteCache)) {
        foreach ($aFriends as $iKey => $aFriend) {
            if (isset($aInviteCache[$aFriend['user_id']])) {
                $aFriends[$iKey]['is_active'] = $aInviteCache[$aFriend['user_id']];
            }
        }

        $this->template()->assign(array(
                'aFriends' => $aFriends
            )
        );
    }
} 
 defined('PHPFOX') or exit('NO DICE!');

if ($sFriendModuleId == 'marketplace') {
    $aInviteCache = Phpfox::getService('marketplace')->isAlreadyInvited($this->getParam('friend_item_id', '0'),
        $aFriends);
    if (is_array($aInviteCache)) {
        foreach ($aFriends as $iKey => $aFriend) {
            if (isset($aInviteCache[$aFriend['user_id']])) {
                $aFriends[$iKey]['is_active'] = $aInviteCache[$aFriend['user_id']];
            }
        }

        $this->template()->assign(array(
                'aFriends' => $aFriends
            )
        );
    }
} 
 ";s:36:"privacy.component_block_form_process";s:374:"$bIsModuleEvent = $this->getParam('is_module_event');

if ($bIsModuleEvent) {
    $aInviteeOnlyPrivacy = [
        'phrase' => _p('invitee_only_privacy'),
        'value'  => '5'
    ];

    foreach ($aPrivacyControls as $key => $value) {
        if ($value['value'] == 3) {
            array_splice($aPrivacyControls, $key, 0, [$aInviteeOnlyPrivacy]);
        }
    }
} 
 ";s:37:"validator.admincp_user_settings_event";s:1067:"$aValidation = [
    'max_upload_size_event' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Max file size for event photos" must be greater or equal to 0'),
    ],
    'total_mass_emails_per_hour' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Waiting time to send out another mass email" must be greater or equal to 0'),
    ],
    'points_event' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Activity points" must be greater or equal to 0'),
    ],
    'flood_control_events' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Waiting time to add new event" must be greater or equal to 0'),
    ],
    'event_sponsor_price' => [
        'def' => 'currency',
        'min' => '0',
        'title' => _p('"Sponsor event price" must be greater than or equal to 0'),
    ],
    'max_events_created' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Maximum number of event can create" must be greater than or equal to 0'),
    ]
]; 
 ";s:35:"like.component_block_browse_process";s:396:"if ($this->request()->get('type_id') == 'groups') {
    $aPage = Phpfox::getService('groups')->getPage($this->request()->getInt('item_id'));
    if (!count($aLikes)) {
        $sErrorMessage = _p('this_group_has_no_members');
    }
}

if ($this->request()->get('type_id') == 'groups' && Phpfox::getService('groups')->isAdmin($this->request()->getInt('item_id'))) {
    $bIsPageAdmin = true;
} 
 ";s:39:"user.service_group_setting_params_names";s:4:" 
 ";s:33:"validator.admincp_settings_groups";s:181:"$aValidation = [
    'groups_limit_per_category' => [
        'title' => _p('validator_groups_limit_per_category'),
        'def' => 'int:required',
        'min' => 0
    ],
]; 
 ";s:38:"validator.admincp_user_settings_groups";s:670:"$aValidation = [
    'max_upload_size_groups' => [
        'title' => _p('validator_max_file_size_for_photos_upload'),
        'def' => 'int:required',
        'min' => 0
    ],
    'points_groups' => [
        'title' => _p('validator_activity_points_received_when_creating_a_new_group'),
        'def' => 'int:required',
        'min' => 0
    ],
    'max_groups_created' => [
        'title' => _p('validator_user_group_setting_max_groups_created'),
        'def' => 'int:required',
        'min' => 0
    ],
    'flood_control' => [
        'title' => _p('validator_user_group_setting_flood_control'),
        'def' => 'int:required',
        'min' => 0
    ]
]; 
 ";s:31:"validator.admincp_settings_mail";s:211:"$aValidation = [
    'chat_group_member_maximum' => [
        'def' => 'int:required',
        'min' => '2',
        'max' => '10',
        'title' => _p('mail_numbers_of_group_members_validation'),
    ]
]; 
 ";s:41:"admincp.service_module_process_delete_end";s:263:"if(Phpfox::isAppActive('Core_Activity_Points') && isset($iId))
{
    db()->delete(Phpfox::getT('activitypoint_setting'),'module_id = "'. $iId .'"');
    db()->update(Phpfox::getT('activitypoint_transaction'),['is_hidden' => 1] ,'module_id = "' . $iId .'"');
} 
 ";s:46:"core.template_block_notification_dropdown_menu";s:1279:"if(Phpfox::isAppActive('Core_Activity_Points') && setting('activitypoint.enable_activity_points')){
    $url = url('/activitypoint');
    $label = _p('activitypoint_title');
    echo '<li role="presentation">
       <a href="'. $url .'">
           <i class="ico ico-star-circle-o"></i>
           ' . $label . '
       </a>
   </li>';
} 
 if (Phpfox::isAppActive('P_SavedItems')) {
    echo '<li role="presentation">
       <a href="' . url('saved') . '">
           <i class="ico ico-bookmark-o"></i>
           ' . _p('module_saveditems') . '
       </a>
   </li>';
} 
 if (Phpfox::getParam('feed.enable_hide_feed', 1)) {
    echo
        '<li role="presentation">
            <a href="javascript:void(0)" onclick="tb_show(\'' . _p('manage_hidden') . '\', $.ajaxBox(\'feed.manageHidden\', \'\'));">
                <i class="ico ico-eye-alt-blocked" aria-hidden="true"></i>' . _p('manage_hidden') . '
            </a>
        </li>';
} 
 $aPromotions = Phpfox::getService('user.promotion')->getPromotionsByUserGroup();
if (count($aPromotions)) {
    $url = url('user/promotion');
    $label = _p('promotions');
    echo '<li role="presentation">
       <a href="'. $url .'">
           <i class="ico ico-target-o"></i>
           ' . $label . '
       </a>
   </li>';
} 
 ";s:20:"on_after_install_app";s:555:"$specialApps = [
    'Core_Subscriptions' => 'subscribe'
];

if(isset($param) && in_array($param['productId'], array_keys($specialApps))) {
    $moduleId = $specialApps[$param['productId']];
    $hasTransaction = db()->select('COUNT(transaction_id)')
        ->from(Phpfox::getT('activitypoint_transaction'))
        ->where(['module_id' => $moduleId, 'is_hidden' => 1])
        ->executeField();
    if(!empty($hasTransaction)) {
        db()->update(Phpfox::getT('activitypoint_transaction'), ['is_hidden' => 0], ['module_id' => $moduleId]);
    }
} 
 ";s:22:"on_after_uninstall_app";s:264:"if(Phpfox::isAppActive('Core_Activity_Points'))
{
    db()->delete(Phpfox::getT('activitypoint_setting'),'module_id = "'. $this->alias .'"');
    db()->update(Phpfox::getT('activitypoint_transaction'),['is_hidden' => 1] ,'module_id = "' . $this->alias .'"');
} 
 ";s:40:"profile.service_profile_get_profile_menu";s:1185:"if (isset($aUser, $aMenus)
    && Phpfox::getParam('activitypoint.enable_activity_points')
    && Phpfox::isUser() && Phpfox::getUserId() == $aUser['user_id']
    && (!empty($userPoints = Phpfox::getService('activitypoint')->getTotalPointsOfUser($aUser['user_id'])) || Phpfox::getParam('profile.show_empty_tabs'))) {
    $aMenus = array_merge([
        [
            'phrase' => _p($userPoints == 1 ? 'activitypoint_point_capital' : 'activitypoint_points_capital'),
            'url' => Phpfox::getLib('url')->makeUrl(Phpfox::getUserId() == $aUser['user_id'] ? 'activitypoint' : 'current'),
            'total' => (int)$userPoints,
            'icon_class' => 'ico ico-star-circle-o',
        ],
    ], $aMenus);
} 
 if (function_exists('materialParseIcon')) {
    foreach ($aMenus as $key => $aMenu) {
        if (empty($aMenu['icon_class'])) {
            $sType = 'default';
            if (!empty($aMenu['actual_url']) && preg_match('/profile_/i', $aMenu['actual_url'])) {
                $aParts = explode('_', $aMenu['actual_url'], 2);
                $sType = $aParts[1];
            }

            $aMenus[$key]['icon_class'] = materialParseIcon($sType);
        }
    }
} 
 ";s:52:"user.include_service_group_setting_import_module_end";s:1174:"$sSettingMainModule =  ($sModule === null ? $aRow['module_id'] : $sModule);
if(Phpfox::isAppActive('Core_Activity_Points') && preg_match('/points_/',$aRow['value']) && $sSettingMainModule !== 'activitypoint')
{
    $iCnt = db()->select('COUNT(*)')
        ->from(Phpfox::getT('activitypoint_setting'))
        ->where(['module_id' => $sSettingMainModule, 'var_name' => $aRow['value']])
        ->execute('getSlaveField');
    if(!$iCnt)
    {
        $aInsert = [
            'var_name' => $aRow['value'],
            'phrase_var_name' => 'user_setting_'.$aRow['value'],
            'module_id' => $sSettingMainModule
        ];
        db()->insert(Phpfox::getT('activitypoint_setting'), $aInsert);
        Phpfox::getLib('cache')->removeGroup('activitypoint_setting_actions');
    }

    $iTransactionCnt = db()->select('COUNT(*)')
        ->from(Phpfox::getT('activitypoint_transaction'))
        ->where('module_id = "'. $sSettingMainModule .'" AND is_hidden = 1')
        ->execute('getSlaveField');
    if($iTransactionCnt)
    {
        db()->update(Phpfox::getT('activitypoint_transaction'),['is_hidden' => 0], 'module_id = "'. $sSettingMainModule. '"');
    }
} 
 ";s:54:"user.include_service_group_setting_importfromapp_start";s:1085:"if(isset($sVarName, $sAlias) && Phpfox::isAppActive('Core_Activity_Points') && preg_match('/points_/',$sVarName) && $sAlias !== 'activitypoint')
{

    $iCnt = db()->select('COUNT(*)')
        ->from(Phpfox::getT('activitypoint_setting'))
        ->where(['module_id' => $sAlias, 'var_name' => $sVarName])
        ->execute('getSlaveField');
    if(!$iCnt)
    {
        $aInsert = [
            'var_name' => $sVarName,
            'phrase_var_name' => 'user_setting_'.$sVarName,
            'module_id' => $sAlias
        ];
        db()->insert(Phpfox::getT('activitypoint_setting'), $aInsert);
        Phpfox::getLib('cache')->removeGroup('activitypoint_setting_actions');
    }

    $iTransactionCnt = db()->select('COUNT(*)')
                    ->from(Phpfox::getT('activitypoint_transaction'))
                    ->where('module_id = "'. $sAlias .'" AND is_hidden = 1')
                    ->execute('getSlaveField');
    if($iTransactionCnt)
    {
        db()->update(Phpfox::getT('activitypoint_transaction'),['is_hidden' => 0], 'module_id = "'. $sAlias . '"');
    }
} 
 ";s:28:"user.service_process_add_end";s:104:"if(!empty($iId))
{
    db()->insert(Phpfox::getT('activitypoint_statistics'),['user_id' => $iId]);
} 
 ";s:40:"validator.admincp_settings_activitypoint";s:22:"$aValidation = []; 
 ";s:38:"feed.template_block_comment_commands_2";s:1200:"defined('PHPFOX') or exit('NO DICE!');

if ((Phpfox_Module::instance()->getFullControllerName() == 'blog.view')) {
    $aItem = $this->getVar('aItem');
    if (isset($aItem['post_status']) && $aItem['post_status'] == BLOG_STATUS_DRAFT) {
        $aFeed = $this->getVar('aFeed');
        $aFeed['no_share'] = 1;
        $this->assign('aFeed', $aFeed);
    }
} 
 defined('PHPFOX') or exit('NO DICE!');

if ((Phpfox_Module::instance()->getFullControllerName() == 'forum.thread') && Phpfox::getParam('forum.enable_thanks_on_posts')) {
    $aPost = $this->getVar('aPost');
    $aThread = (array)$this->getVar('aThread');
    $iTotalPosts = (int)$this->getVar('iTotalPosts');
    if (!isset($aPost['thanks_count'])) {
        $aPost['thanks_count'] = Phpfox::getService('forum.post')->getThanksCount($aPost['post_id']);
    }
    $sCountPhrase = _p('thanks_count', array('count' => $aPost['thanks_count']));

    echo '<div class="js_thank_post" ' . (($aPost['thanks_count'] == 0) ? 'style="display:none;" ' : '') . 'id="js_thank_' . $aPost['post_id'] . '"><a href="#" onclick="return $Core.box(\'forum.thanksBrowse\', \'\', \'post_id=' . $aPost['post_id'] . '\');">' . $sCountPhrase . '</a></div>';
} 
 ";s:40:"tag.service_tag_gettagcloud_before_query";s:121:"if (isset($sCategory) && $sCategory == 'blog') {
    Phpfox::getService('blog')->getConditionsForTagCloud($aWhere);
} 
 ";s:36:"validator.admincp_user_settings_blog";s:1233:"defined('PHPFOX') or exit('NO DICE!');
$aValidation = [
    'flood_control_blog' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Time to wait before add another blog" must be greater than or equal to 0'),
    ],
    'points_blog' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Activity points" must be greater than or equal to 0'),
    ],
    'blog_photo_max_upload_size' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Maximum photo size of blog" must be greater than or equal to 0'),
    ],
    'blog_sponsor_price' => [
        'def' => 'currency',
        'min' => '0',
        'title' => _p('"Sponsor blog price" must be greater than or equal to 0'),
    ],
    'total_blogs_displays' => [
        'def' => 'array:required',
        'subdef' => 'int:required',
        'min' => '1',
        'title' => _p('Each value of "Define how many blogs a user can view at once when browsing the public blog section?" must be greater than 0'),
    ],
    'blog_total_items_can_create' => [
        'def' => 'int',
        'min' => '1',
        'title' => _p('"Maximum number of blogs" must be greater than or equal to 0 and in type of integer')
    ]
]; 
 ";s:31:"validator.admincp_settings_quiz";s:198:"$aValidation = [
    'default_answers_count' => [
        'def' => 'int:required',
        'min' => '2',
        'title' => _p('"How Many Answers Per Default" must be greater than 1'),
    ],
]; 
 ";s:36:"validator.admincp_user_settings_quiz";s:1416:"$aValidation = [
    'max_questions' => [
        'def' => 'int:required',
        'min' => '1',
        'title' => _p('"Max questions can a new quiz have" must be greater than 0'),
    ],
    'min_questions' => [
        'def' => 'int:required',
        'min' => '1',
        'title' => _p('"Min questions can a new quiz have" must be greater than 0'),
    ],
    'max_answers' => [
        'def' => 'int:required',
        'min' => '2',
        'title' => _p('"Max answers each question in a quiz have" must be greater than 1'),
    ],
    'min_answers' => [
        'def' => 'int:required',
        'min' => '2',
        'title' => _p('"Min answers each question in a quiz have" must be greater than 1'),
    ],
    'points_quiz' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Activity Points" must be greater or equal to 0'),
    ],
    'quiz_max_upload_size' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Max file size for quiz photo" must be greater or equal to 0'),
    ],
    'quiz_sponsor_price' => [
        'def' => 'currency',
        'min' => '0',
        'title' => _p('"Sponsor quiz price" must be greater than or equal to 0'),
    ],
    'quiz_total_items_can_create' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Maximum number of quizzes" must be greater than or equal to 0 and in type of integer'),
    ]
]; 
 ";s:36:"validator.admincp_user_settings_poll";s:1075:"$aValidation = [
    'poll_max_upload_size' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Max file size for poll photos" must be greater than or equal to 0'),
    ],
    'points_poll' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Activity points" must be greater than or equal to 0'),
    ],
    'maximum_answers_count' => [
        'def' => 'int:required',
        'min' => '2',
        'title' => _p('"Maximum answers" must be greater than or equal to 2'),
    ],
    'poll_flood_control' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Waiting time to add new poll" must be greater than or equal to 0'),
    ],
    'poll_sponsor_price' => [
        'def' => 'currency',
        'min' => '0',
        'title' => _p('"Sponsor poll price" must be greater than or equal to 0'),
    ],
    'poll_total_items_can_create' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Maximum number of polls" must be greater than or equal to 0 and in type of integer')
    ]
]; 
 ";s:12:"ajax_getdata";s:298:"if (isset(self::$_aParams['fromForumApp']) && self::$_aParams['core']['call'] == 'user.browse') {
    $sXml.= $this->_ajaxSafe('<script type="text/javascript">if ($("#js_user_loader").length) { $("#js_user_loader").find(\'input[name="cancel"]\').attr("onclick", "tb_remove();"); }</script>');
} 
 ";s:38:"core.template_block_comment_border_new";s:2141:"if ((Phpfox_Module::instance()->getFullControllerName() == 'forum.thread' || (PHPFOX_IS_AJAX && isset($_POST['core']) && $_POST['core']['call'] == 'forum.addReply')) && Phpfox::isUser()) {
    $aPost = $this->getVar('aPost');
    $aThread = (array)$this->getVar('aThread');
    $iTotalPosts = (int)$this->getVar('iTotalPosts');

    if ((!isset($aThread['forum_is_closed']) || !$aThread['forum_is_closed']) && Phpfox::getUserParam('forum.can_approve_forum_post') && $aPost['view_id'] == 1) {
        echo '<li><a href="#" onclick="$.ajaxCall(\'forum.approvePost\', \'detail=true&amp;post_id='.$aPost['post_id'].'\', \'GET\'); return false;"><i class="ico ico-check-square-alt"></i> '._p('approve').'</a></li>';
    }
    if ((!isset($aThread['forum_is_closed']) || !$aThread['forum_is_closed']) && ((user('forum.can_edit_own_post') && $aPost['user_id'] == Phpfox::getUserId())
        || user('forum.can_edit_other_posts')
        || Phpfox::getService('forum.moderate')->hasAccess($aPost['forum_id'], 'edit_post')
    )) {
        echo '<li><a href="#" onclick="$Core.box(\'forum.reply\', 800, \'id=' . $aPost['thread_id'] . '&amp;edit=' . $aPost['post_id'] . '\'); return false;"><i class="fa fa-pencil-square-o"></i> ' . _p('edit') . '</a></li>';

    }

    if (((!isset($aPost['is_started']) || !$aPost['is_started']) || $aPost['count'] > 0) && ((Phpfox::getUserParam('forum.can_delete_own_post') && $aPost['user_id'] == Phpfox::getUserId())
            || Phpfox::getUserParam('forum.can_delete_other_posts')
            || Phpfox::getService('forum.moderate')->hasAccess($aPost['forum_id'], 'delete_post')
            || (!empty($aThread['group_id']) && (Phpfox::isAppActive('Core_Pages') || Phpfox::isAppActive('PHPfox_Groups')) && ($sModule = Phpfox::getPagesType($aThread['group_id'])) && Phpfox::isModule($sModule) && Phpfox::getService($sModule)->isAdmin($aThread['group_id']))
        )
    ) {
        echo '<li class="item_delete"><a href="#" onclick="return $Core.forum.deletePost(\'' . $aPost['post_id'] . '\');" title="' . _p('delete_this_post') . '"><i class="fa fa-times"></i> ' . _p('delete') . '</a></li>';

    }
} 
 ";s:38:"feed.template_block_comment_commands_1";s:1712:"defined('PHPFOX') or exit('NO DICE!');

if ((Phpfox_Module::instance()->getFullControllerName() == 'forum.thread' || (PHPFOX_IS_AJAX && isset($_POST['core']) && $_POST['core']['call'] == 'forum.addReply')) && Phpfox::isUser()) {
    $aPost = $this->getVar('aPost');
    $aThread = (array)$this->getVar('aThread');
    $iTotalPosts = (int)$this->getVar('iTotalPosts');

    if (isset($aThread['canReply']) && $aThread['canReply']) {
        echo '<div class="forum_quote_holder feed-comment-link">
        <a role="button" class="forum_quote" onclick="$Core.box(\'forum.reply\', 800, \'id=' . $aPost['thread_id'] . '&amp;quote=' . $aPost['post_id'] . '&amp;total_post=' . $iTotalPosts . '\'); return false;"><span>' . _p('quote') . '</span></a></div>';
    }

    if (setting('forum.enable_thanks_on_posts') && (user('forum.can_thank_on_forum_posts')
            && ($aPost['user_id'] != Phpfox::getUserId()) && !Phpfox::getService('user.block')->isBlocked(null,
                $aPost['user_id']))
    ) {
        if (empty($aPost['thank_id'])) {
            echo '<div class="forum_thanks_holder feed-comment-link">
            <a role="button" id="forum_thanks_btn_' . $aPost['post_id'] . '" class="forum_thanks" onclick="$.ajaxCall(\'forum.thanks\', \'post_id=' . $aPost['post_id'] . '\');return false;" title="' . _p('thanks') . '"></a></div>';
        } else {
            echo '<div class="forum_thanks_holder feed-comment-link">
            <a role="button" id="forum_thanks_btn_' . $aPost['post_id'] . '" class="forum_thanks thanked" onclick="$.ajaxCall(\'forum.removeThanks\', \'thank_id=' . $aPost['thank_id'] . '\');return false;" title="' . _p('delete_thanks') . '"></a></div>';
        }
    }
} 
 ";s:32:"validator.admincp_settings_forum";s:527:"$aValidation = [
    'keep_active_posts' => [
        'def' => 'int:required',
        'min' => '1',
        'title' => _p('"Active Posts" must be greater than 0'),
    ],
    'total_posts_per_thread' => [
        'def' => 'int:required',
        'min' => '1',
        'title' => _p('"Show posts per thread at first time" must be greater than 0'),
    ],
    'total_forum_tags_display' => [
        'def' => 'int:required',
        'min' => '1',
        'title' => _p('"Total Tag Display" must be greater than 0'),
    ]
]; 
 ";s:37:"validator.admincp_user_settings_forum";s:642:"$aValidation = [
    'points_forum' => [
        'def' => 'int:required',
        'min' => '0',
        'title' => _p('"Points received when adding a thread/post within the forum" must be greater than or equal to 0'),
    ],
    'forum_thread_flood_control' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Time to wait before user can post a new thread" must be greater than or equal to 0'),
    ],
    'forum_post_flood_control' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Time to wait before user can post a new reply to a thread" must be greater than or equal to 0'),
    ],
]; 
 ";s:26:"forum.component_ajax_reply";s:359:"echo '<script type="text/javascript"> 
$Behavior.CKEditor_forum_submit_reply = function() {
    $(\'#js_forum_form_submit_btn\').on(\'click\', function () {
        CKEDITOR.instances.text.updateElement();
    });
    
    $(\'#js_forum_form_submit_btn\').on(\'submit\', function () {
        CKEDITOR.instances.text.updateElement();
    });
}
</script>'; 
 ";s:14:"get_editor_end";s:1560:"$jscript = "if(typeof ckeditor_initialize != 'function'){
    function ckeditor_initialize(sid, mode){
        return function(){
            var ele  = $('#' + sid);
            if(!ele.length) return;
            if(ele.data('ckeditor_built')) return;
            ele.attr('data-ckeditor_built',true);
            CKEDITOR.config.contentsLangDirection = document.dir;
            CKEDITOR.config.extraAllowedContent = 'img(parsed_image)';
            if (mode == 'full_height') {
                CKEDITOR.config.height = window.innerHeight-110;
                CKEDITOR.replace(sid, {});
            } else if(mode == 'simple') {
                CKEDITOR.config.height = 60;
                CKEDITOR.replace(sid, {
                    toolbar: [{ name: 'basicstyles', items: [ 'Bold', 'Italic' ] }]
                });
            } 
            else if(mode == 'none_full') {
                CKEDITOR.replace(sid, {});
            }
            else {
                CKEDITOR.replace(sid,{
                    removePlugins: 'sourcearea'
                });
            }
        }
    }
}";

if (!isset($aParams['enter'])) {
    $mode = isset($aParams['mode']) && $aParams['mode'] ? $aParams['mode'] : (isset($aParams['simple']) && $aParams['simple'] ? 'simple' : 'none');
    $sPackage = Phpfox::getUserParam('pckeditor.ckeditor_package');
    if($mode == 'none') {
        $mode .= '_' . $sPackage;
    }
    $sStr .= '<script>' . $jscript . '$Behavior.loadEditor' . $iId . '  = ckeditor_initialize("' . $iId . '","' . $mode . '");' . '</script>';
} 
 ";s:14:"set_editor_end";s:440:"$sPackage = Phpfox::getUserParam('pckeditor.ckeditor_package');
switch ($sPackage) {
    case 'full':
        $file = 'ckeditor_full/ckeditor.js';
        break;
    case 'basic':
        $file = 'ckeditor_basic/ckeditor.js';
        break;
    default:
        $file = 'ckeditor/ckeditor.js';
        break;
}
$this->setHeader([
    $file => 'app_core-CKEditor'
]); 
 $this->setHeader([
    'im-libraries.min.js' => 'app_core-im',
]); 
 ";s:36:"template_getheader_exclude_bundle_js";s:157:"$aExcludeBundles[] = 'ckeditor/ckeditor.js'; 
 $aExcludeBundles[] = 'im-libraries.min.js'; 
 $aExcludeBundles[] = 'core-shoutbox/assets/autoload.less'; 
 ";s:26:"template_getheader_setting";s:588:"$aJsVars['sEditor'] = 'CKEditor'; 
 $sShoutboxPath = (Phpfox::getVersion() == '4.5.0') ? 'phpFox_Shoutbox' : 'core-shoutbox';
$aJsVars['shoutbox_polling'] = Phpfox::getLib('url')->makeUrl('shoutbox.polling');
$aJsVars['shoutbox_user_profile_link'] = Phpfox_Url::instance()->makeUrl(Phpfox::getUserBy('user_name'));
$aJsVars['shoutbox_user_full_name'] = Phpfox::getUserBy('full_name');
$iSleepingTime = setting('shoutbox_polling_max_request_time');

if ($iSleepingTime > 15 || $iSleepingTime < 2) {
    $iSleepingTime = 5;
}
$aJsVars['shoutbox_sleeping_time'] = $iSleepingTime * 1000; 
 ";s:49:"admincp.component_controller_setting_edit_process";s:1141:"if(!empty($aVals['value']['pf_video_s3_key']) && !empty($aVals['value']['pf_video_s3_secret']) && !empty($aVals['value']['pf_video_s3_bucket'])) {
    $region = 'us-east-2'; // default
    $oClient = new Aws\S3\S3Client([
        'region' => $region,
        'version' => 'latest',
        'credentials' => [
            'key' => $aVals['value']['pf_video_s3_bucket'],
            'secret' => $aVals['value']['pf_video_s3_bucket'],
        ],
    ]);
    $region = $oClient->determineBucketRegion($aVals['value']['pf_video_s3_bucket']);
    Phpfox::getLib('database')->update(':setting', ['value_actual' => $region], 'var_name="pf_video_s3_region" AND module_id="v"');

    Phpfox::getLib('cache')->remove('setting');
    Phpfox::getLib('cache')->remove('app_settings');

    $aNewSettings = Phpfox::getService('admincp.setting')->get($aCond);
    $this->template()
        ->assign(['aSettings' => $aNewSettings]);
} 
 defined('PHPFOX') or exit('NO DICE!');

if(isset($sModuleId) && $sModuleId == 'subscribe')
{
    $this->template()->setHeader('cache', [
        'head' => ['colorpicker/css/colpick.css' => 'static_script'],
    ]);
} 
 ";s:38:"groups.component_controller_view_build";s:486:"if (Phpfox::getParam('v.pf_video_allow_create_feed_when_add_new_item')) {
    if (Phpfox::isAppActive('PHPfox_Videos') && Phpfox::getUserParam('v.pf_video_view')) {
        $val = user('pf_video_share', 1);
        if ($val) {
            $val = Phpfox::getService('groups')->hasPerm($aPage['page_id'], 'pf_video.share_videos');
        }
        $val = ($val) ? 1 : 0;
        $this->template()->setHeader('<script>window.can_post_video_on_group = ' . $val . ';</script>');
    }
} 
 ";s:37:"pages.component_controller_view_build";s:484:"if (Phpfox::getParam('v.pf_video_allow_create_feed_when_add_new_item')) {
    if (Phpfox::isAppActive('PHPfox_Videos') && Phpfox::getUserParam('v.pf_video_view')) {
        $val = user('pf_video_share', 1);
        if ($val) {
            $val = Phpfox::getService('pages')->hasPerm($aPage['page_id'], 'pf_video.share_videos');
        }
        $val = ($val) ? 1 : 0;
        $this->template()->setHeader('<script>window.can_post_video_on_page = ' . $val . ';</script>');
    }
} 
 ";s:36:"user.service_process_edit_status_end";s:458:"if (Phpfox::isAppActive('PHPfox_Videos') && $feedTypeIdUpdate == 'v') {
    Phpfox::getService('v.process')->updateHashtag($iStatusId, null, null, $sStatus);
} 
 if (Phpfox::isAppActive('P_StatusBg') && !empty($aStatusFeed) && isset($aVals['disabled_status_background'])) {
    Phpfox::getService('pstatusbg.process')->editUserStatusCheck($aStatusFeed['item_id'], 'user_status',
        $aStatusFeed['user_id'], !$aVals['disabled_status_background']);
} 
 ";s:33:"validator.admincp_user_settings_v";s:721:"$aValidation['pf_video_file_size'] = [
    'def' => 'int:required',
    'min' => 1,
    'title' => '"Maximum file size of video uploaded" must be greater than 0'
];
$aValidation['pf_video_max_file_size_photo_upload'] = [
    'def' => 'int:required',
    'min' => 1,
    'title' => '"Maximum file size of photo uploaded" must be greater than 0'
];
$aValidation['v_sponsor_price'] = [
    'def' => 'currency',
    'title' => '"How much is the sponsor space worth for videos? This works in a CPM basis." must be greater than or equal to 0'
];
$aValidation['pf_video_total_videos_upload'] = [
    'def'   => 'int',
    'min'   => '0',
    'title' => _p('"Maximum number of videos" must be greater than or equal to 0'),
]; 
 ";s:44:"mail.service_callback_getglobalnotifications";s:58:"if (setting('pf_im_node_server')) {
    $iTotal = 0;
} 
 ";s:36:"notification.component_ajax_update_1";s:104:"if (setting('pf_im_chat_server', 'nodejs') == 'nodejs') {
    $this->call('$Core_IM.start_im();');
} 
 ";s:29:"validator.admincp_settings_im";s:338:"$aValidation = [
    'pf_total_conversations' => [
        'title' => _p('validator_im_pf_total_conversations'),
        'def' => 'int:required',
        'min' => 0
    ],
    'pf_time_to_delete_message' => [
        'title' => _p('validator_im_pf_time_to_delete_message'),
        'def' => 'int:required',
        'min' => 0
    ]
]; 
 ";s:33:"core.template-notification-custom";s:472:"defined('PHPFOX') or exit('NO DICE!');
if (Phpfox::isAppActive('Core_Subscriptions') && (Phpfox::getParam('subscribe.enable_subscription_packages') || Phpfox::getService('subscribe.purchase')->hasAnyPurchases())) {
    echo '<li role="presentation">' .
            '<a href="'. Phpfox_Url::instance()->makeUrl('subscribe') .'">' .
                '<i class="fa fa-address-card-o"></i>&nbsp;' .
                _p('membership') .
            '</a>' .
        '</li>';
} 
 ";s:33:"user.service_auth___construct_end";s:953:"defined('PHPFOX') or exit('NO DICE!');

if (isset($this->_aUser['user_id']) && $this->_aUser['user_id'] > 0 && Phpfox::getParam('subscribe.subscribe_is_required_on_sign_up') && $this->_aUser['user_group_id'] == '2' && $this->_aUser['subscribe_id'] > 0)
{
	$bSetDirect = (((Phpfox_Request::instance()->get('req1') == 'subscribe' && Phpfox_Request::instance()->get('req2') == 'renew-method')) || ((Phpfox_Request::instance()->get('req1') == 'subscribe' && Phpfox_Request::instance()->get('req2') == 'register')) || ((Phpfox_Request::instance()->get('req1') == 'user' && Phpfox_Request::instance()->get('req2') == 'logout'))) ? false : true;

	if ($bSetDirect === true)
	{
        require_once(PHPFOX_DIR_SITE . 'Apps' . PHPFOX_DS . 'core-subscriptions' . PHPFOX_DS . 'Service' . PHPFOX_DS . 'Purchase' . PHPFOX_DS . 'Purchase.php' );
        (new Apps\Core_Subscriptions\Service\Purchase\Purchase())->setRedirectId($this->_aUser['subscribe_id']);
	}
} 
 ";s:35:"user.service_auth___construct_query";s:108:"defined('PHPFOX') or exit('NO DICE!');

$bLoadUserField = true;
$sUserFieldSelect = 'uf.subscribe_id, '; 
 ";s:39:"user.service_process_updateadvanced_end";s:1161:"defined('PHPFOX') or exit('NO DICE!');

$currentUserId = Phpfox::getUserId();
if(Phpfox::isAppActive('Core_Subscriptions') && ((int)$currentUserId == (int)ADMIN_USER_ID) && isset($aVals['user_group_id']) && isset($iUserid)) {
    $isUserSignUp = db()->select('subscribe_id')
        ->from(Phpfox::getT('user_field'))
        ->where('user_id = '. (int)$iUserid)
        ->execute('getSlaveField');
    if((int)$isUserSignUp > 0)
    {
        $aInfo = db()->select('package.user_group_id, purchase.user_id')
            ->from(Phpfox::getT('subscribe_purchase'),'purchase')
            ->join(Phpfox::getT('subscribe_package'),'package','package.package_id = purchase.package_id')
            ->where('purchase.purchase_id = '. (int)$isUserSignUp)
            ->execute('getSlaveRow');
        if(!empty($aInfo) && ((int)$aInfo['user_id'] == (int)$iUserid)  && ((int)$aVals['user_group_id'] == (int)$aInfo['user_group_id']))
        {
            db()->update(Phpfox::getT('user_field'),['subscribe_id' => 0], 'user_id = '. (int)$iUserid);
            db()->delete(Phpfox::getT('subscribe_purchase'),'purchase_id = '. (int)$isUserSignUp);
        }
    }
} 
 ";s:31:"feed.service_feed_can_sponsored";s:134:"//hide feature sponsor on feed in case ad is enabled
if (!Phpfox::isAppActive('Core_BetterAds')) {
    $bPluginInChange = false;
} 
 ";s:29:"validator.admincp_settings_ad";s:223:"defined('PHPFOX') or exit('NO DICE!');

$aValidation['better_ads_number_ads_per_location'] = [
    'def' => 'int:required',
    'min' => '1',
    'title' => _p('number_of_ad_on_each_location_must_be_greater_than_0'),
]; 
 ";s:55:"mail.component_controller_compose_controller_validation";s:579:"$sModuleId = $this->request()->get('module_id');
if ($sModuleId && $sModuleId == 'marketplace' && ($iListingId = $this->request()->get('listing_id'))) {
    $aListing = Phpfox::getService('marketplace')->getListing($iListingId);

    if (!empty($aListing)) {
        $sPhraseVarName = 'hello_i_am_interested_in_your_listing_listing_title_listing_url';
        $this->template()->assign('sMessageClaim',
            _p($sPhraseVarName, [
                'listing_title' => $aListing['title'],
                'listing_url' => $aListing['bookmark_url']
            ]));
    }
} 
 ";s:38:"validator.admincp_settings_marketplace";s:359:"$aValidation = [
    'days_to_notify_expire' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Days to Notify Expiring Listing" must be greater or equal to 0'),
    ],
    'days_to_expire_listing' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Days to Expire" must be greater or equal to 0'),
    ],
]; 
 ";s:43:"validator.admincp_user_settings_marketplace";s:1114:"$aValidation = [
    'points_marketplace' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Activity points" must be greater than or equal to 0'),
    ],
    'flood_control_marketplace' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Waiting time to add new listing" must be greater than or equal to 0'),
    ],
    'max_upload_size_listing' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Max file size for listing photos" must be greater than or equal to 0'),
    ],
    'total_photo_upload_limit' => [
        'def' => 'int',
        'min' => '0',
        'title' => _p('"Total photos can upload to each listing" must be greater than or equal to 0'),
    ],
    'marketplace_sponsor_price' => [
        'def' => 'currency',
        'min' => '0',
        'title' => _p('"Sponsor listing price" must be greater than or equal to 0'),
    ],
    'marketplace_total_items_upload' => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('"Maximum number of listings" must be greater than or equal to 0'),
    ]
]; 
 ";s:44:"core.component_controller_index_member_start";s:83:"$this->template()->setPhrase(Phpfox::getService('shoutbox.get')->getPhrases()); 
 ";s:39:"groups.component_controller_view_assign";s:83:"$this->template()->setPhrase(Phpfox::getService('shoutbox.get')->getPhrases()); 
 ";s:38:"pages.component_controller_view_assign";s:83:"$this->template()->setPhrase(Phpfox::getService('shoutbox.get')->getPhrases()); 
 ";s:27:"feed.template_block_entry_2";s:5782:"if (Phpfox::getUserParam('saveditems.can_save_item') && Phpfox::getUserBy('profile_page_id') == 0) {
    $exceptionTypes = Phpfox::getService('saveditems')->getExceptionalTypes();
    $typeId = $this->_aVars['aFeed']['type_id'];
    if (!in_array($typeId, $exceptionTypes)) {
        $typeCount = explode('_', $typeId);
        $moduleId = !empty($typeCount) ? $typeCount[0] : '';
        if (Phpfox::isModule($moduleId) && (in_array($typeId, ['user_status', 'link']) || Phpfox::hasCallback($moduleId,
                    'globalUnionSearch'))) {
            $isSaved = Phpfox::getService('saveditems')->isSaved($typeId, $this->_aVars['aFeed']['item_id']);
            echo '<li class="js_saved_item_' . $this->_aVars['aFeed']['feed_id'] . '">';
            Phpfox_Template::instance()->assign([
                'saveItemParams' => [
                    'id' => $this->_aVars['aFeed']['feed_id'],
                    'type_id' => !empty($typeId) ? $typeId : $this->_aVars['aFeed']['like_type_id'],
                    'item_id' => $this->_aVars['aFeed']['item_id'],
                    'link' => urlencode($this->_aVars['aFeed']['feed_link']),
                    'is_saved' => $isSaved,
                ]
            ])->getTemplate('saveditems.block.save-action');
            echo "</li>";
        }
    }
} 
 if(!empty($this->_aVars['aFeed'])) {
    $aFeed = $this->_aVars['aFeed'];
    $aUser = isset($this->_aVars['aUser']) ? $this->_aVars['aUser'] : null;
    $noShowReport = ['user_status', 'friend', 'poke'];
    $aParts = explode('_', $aFeed['type_id']);
    if(!in_array($aFeed['type_id'], $noShowReport) && Phpfox::hasCallback($aParts[0],'getReportRedirect' . (isset($aParts[1]) ? ucfirst($aParts[1]) : '')) && $aFeed['user_id'] != Phpfox::getUserId() && (!isset($this->_aVars['sFeedType']) || isset($aFeed['feed_view_comment'])) && !isset($aFeed['report_module']))
    {
        echo "<li><a href=\"#?call=report.add&amp;height=100&amp;width=400&amp;type=". $aFeed['type_id']. "&amp;id=" . $aFeed['item_id'] ."\" class=\"inlinePopup activity_feed_report\" title=\"". _p('report'). "\">
				<span class=\"ico ico-warning-o\"></span>
				". _p('report'). "</a>
		</li>";
    }

    $showEdit = ['link', 'photo', 'v'];
    if(in_array($aFeed['type_id'], $showEdit) && (!isset($aFeed['is_view_item']) || isset($aFeed['feed_view_comment']))) {
        $canEdit = false;
        $module = '';
        $itemId = '';
        $feedCallback = $this->_aVars['aFeedCallback'];
        $feedType = $aFeed['type_id'];
        switch ($feedType) {
            case 'link': {
                $item = Phpfox::getService('link')->getLinkById($aFeed['item_id']);
                break;
            }
            case 'photo': {
                $item = Phpfox::getService('photo')->getPhotoItem($aFeed['item_id']);              
                break;
            }
            case 'v': {
                $item = Phpfox::getService('v.video')->getForEdit($aFeed['item_id']);
                break;
            }
        }

        if (!empty($feedCallback['module']) && !empty($feedCallback['item_id']) && !in_array($feedCallback['module'], $showEdit)) {
            $module = $feedCallback['module'];
            $itemId = $feedCallback['item_id'];
            if(in_array($module, ['pages', 'groups']) && !empty($item) && ($item['module_id'] == $module) && (defined('PHPFOX_IS_PAGES_VIEW') && defined('PHPFOX_PAGES_ITEM_TYPE') && PHPFOX_PAGES_ITEM_TYPE === $module)) {
                $isAdmin = Phpfox::getService($module)->isAdmin($aFeed['parent_user_id']);
                $canEdit = ($aFeed['user_id'] == Phpfox::getUserId()) || $isAdmin;
            } else {
                $canEdit = (Phpfox::getUserParam('feed.can_edit_own_user_status') && $aFeed['user_id'] == Phpfox::getUserId()) || Phpfox::getUserParam('feed.can_edit_other_user_status');
            }
            $canEditPrivacy = false;
        } else {
            if((in_array($feedType, ['link', 'photo']) && empty($item['module_id'])) || ($feedType == 'v' && in_array($item['module_id'], ['user', 'video']))) {
                $canEdit = (Phpfox::getUserParam('feed.can_edit_own_user_status') && $aFeed['user_id'] == Phpfox::getUserId()) || Phpfox::getUserParam('feed.can_edit_other_user_status');
            }

            $canEditPrivacy = !isset($bFeedIsParentItem)
                && (!defined('PHPFOX_IS_USER_PROFILE')
                    || (defined('PHPFOX_IS_USER_PROFILE') && $aFeed['user_id'] == Phpfox::getUserId() && $aFeed['feed_reference'] == 1)
                    || (defined('PHPFOX_IS_USER_PROFILE') && isset($aUser['user_id']) && $aUser['user_id'] == Phpfox::getUserId()
                        && empty($mOnOtherUserProfile)))
                && $aFeed['type_id'] != 'feed_comment'
                && empty($aFeed['parent_user_id']);
        }

        if ($canEdit) {
            echo "<li class=\"\"><a href=\"#\" class=\"\" data-privacy-editable=\"". (int)$canEditPrivacy . "\" data-id=\"". $aFeed['feed_id'] ."\" data-module=\"". $module ."\" data-item_id=\"". $itemId ."\" onclick=\"tb_show('" ._p('edit_your_post')."', $.ajaxBox('feed.editUserStatus', 'height=400&amp;width=600&amp;id=". $aFeed['feed_id'] ."&amp;module=". $module ."&amp;item_id=". $itemId ."')); return false;\">
			<span class=\"ico ico-pencilline-o\"></span>". _p('edit') ."</a></li>";
        }
    }
}

if (!empty($aFeed['can_remove_tag'])) {
    echo "<li class=\"\"><a href=\"#\" onclick=\"\$Core.feed.removeTag({$aFeed['feed_id']},{$aFeed['item_id']},'{$aFeed['type_id']}');return false;\" class=\"\"><span class=\"ico ico-price-tag-o\"></span>" . _p('remove_tag_upper') . "</a></li>";
}
if(Phpfox::getParam('feed.enable_hide_feed', 1)) {
    Phpfox_Template::instance()->getTemplate('feed.block.link-hide');
} 
 ";s:43:"mobile.api_resource_base_generate_array_end";s:5693:"if (Phpfox::isAppActive('P_SavedItems')) {
    $specialResources = ['feed', 'forum_thread'];
    $specialItemTypes = [
        'forum_thread' => [
            'item_type' => 'forum',
            'item_id' => 'id',
        ]
    ];

    $tempResourceName = $this->getResourceName();
    if(in_array($tempResourceName, $specialResources) || isset($result['feed_param'])) {
        $isFeedResource = $tempResourceName == 'feed';
        if(in_array($tempResourceName, $specialResources)) {
            $tempResult = [
                'item_type' => $isFeedResource ? $result['item_type'] : $specialItemTypes[$tempResourceName]['item_type'],
                'item_id' => $isFeedResource ? $result['item_id'] : $result[$specialItemTypes[$tempResourceName]['item_id']]
            ];
            if(empty($isFeedResource) && empty($result['feed_param'])) {
                $result = array_merge($result, [
                    'like_type_id' => $tempResult['item_type'],
                    'item_id' => $tempResult['item_id'],
                ]);
                $tempResult['is_detail'] = true;
            }
        } else {
            $tempResult = [
                'item_type' => $result['feed_param']['like_type_id'],
                'item_id' => $result['feed_param']['item_id']
            ];
        }

        $valid = true;

        switch ($tempResult['item_type']) {
            case 'forum':
                if(empty($tempResult['is_detail'])) {
                    $itemId = db()->select('thread_id')
                        ->from(Phpfox::getT('forum_thread'))
                        ->where(['start_id' => $tempResult['item_id']])
                        ->execute('getSlaveField');
                    if(empty($itemId)) {
                        $valid = false;
                    } else {
                        $tempResult['item_id'] = $itemId;
                    }
                }

                break;
        }

        if($valid) {
            $result['saved_id'] = (int)Phpfox::getService('saveditems')->isSaved($tempResult['item_type'], $tempResult['item_id'], true);

            $result['is_saved'] = (int)(!!$result['saved_id']);

            $result['extra']['can_save_item'] = false;

            $exceptionalTypes = Phpfox::getService('saveditems')->getExceptionalTypes();

            if (Phpfox::getUserParam('saveditems.can_save_item') && Phpfox::getUserBy('profile_page_id') == 0 && !in_array($tempResult['item_type'], $exceptionalTypes)) {
                $typeCount = explode('_', $tempResult['item_type']);
                $moduleId = !empty($typeCount) ? $typeCount[0] : '';
                if (Phpfox::isModule($moduleId) && (in_array($tempResult['item_type'],
                            ['user_status', 'link']) || Phpfox::hasCallback($moduleId, 'globalUnionSearch'))) {
                    $result['extra']['can_save_item'] = true;
                }
            }
        }
    }
} 
 if (Phpfox::isAppActive('P_Reaction')) {
    if ($this->getResourceName() == 'feed' || $this->getResourceName() == 'comment') {
        $itemId = $this->getItemId();
        if($this->getResourceName() == 'comment') {
            $itemId = $this->id;
        }
        if (!empty($this->getIsLiked())) {
            $result['user_reacted'] = (new Apps\P_Reaction\Service\Api\PReactionApi())->getUserReacted($itemId, $this->like_type_id);
        }
        if ((isset($this->rawData['feed_total_like']) && (int)$this->rawData['feed_total_like'] > 0) ||
            (isset($this->rawData['total_like']) && (int)$this->rawData['total_like'] > 0)
        ) {
            list(, $mostReactions) = Phpfox::getService('preaction')->getMostReaction($this->like_type_id, $itemId, (isset($this->rawData['feed_table_prefix']) ? $this->rawData['feed_table_prefix'] : ''));
            if (count($mostReactions)) {
                foreach ($mostReactions as $most_reaction) {
                    $result['most_reactions'][] = Apps\P_Reaction\Api\Resource\PReactionResource::populate($most_reaction)->displayShortFields()->toArray();
                }
            }
        }
    }

    if ($this->load_feed_param && !empty($result['feed_param']) && is_array($result['feed_param'])) {
        $result['feed_param']['user_reacted'] = (new Apps\P_Reaction\Service\Api\PReactionApi())->getUserReacted($result['feed_param']['item_id'], $result['feed_param']['like_type_id']);
        $likes = Phpfox::getService('like')->getAll($result['feed_param']['like_type_id'], $result['feed_param']['item_id'], (isset($this->rawData['feed_table_prefix']) ? $this->rawData['feed_table_prefix'] : ''));
        if (isset($likes['likes'])) {
            if (!empty($likes['likes']['most_reactions'])) {
                foreach ($likes['likes']['most_reactions'] as $most_reaction) {
                    $result['feed_param']['most_reactions'][] = Apps\P_Reaction\Api\Resource\PReactionResource::populate($most_reaction)->displayShortFields()->toArray();
                }
            }
            if (isset($likes['likes']['phrase'])) {
                $result['feed_param']['like_phrase'] = html_entity_decode($likes['likes']['phrase'], ENT_QUOTES);
            }
        }
    }
} 
 if (Phpfox::isAppActive('P_StatusBg') && ($this->getResourceName() == 'feed')) {
    if (isset($this->rawData['status_background'])) {
        $result['status_background'] = $this->rawData['status_background'];
    } elseif (isset($this->rawData['item_id'], $this->rawData['type_id'], $this->rawData['user_id'])) {
        $result['status_background'] = Phpfox::getService('pstatusbg')->getFeedStatusBackground($this->rawData['item_id'], $this->rawData['type_id'], $this->rawData['user_id']);
    }
} 
 ";s:32:"mobile.core_api_get_app_settings";s:3160:"$l = $this->getLocalization();
$specialResources = Phpfox::getService('saveditems')->getSpecialResourceNamesForAddingSaveAction();
$defaultActionMenus = $this->getDefaultActionMenu();
foreach ($settings as $moduleId => $setting) {
    if ($moduleId != 'saveditems') {
        $tempSources = $setting['setting']['resources'];
        foreach ($tempSources as $resourceName => $resourceSetting) {
            if (isset($resourceSetting['action_menu']) || in_array($resourceName, $specialResources)) {
                if(empty($resourceSetting['action_menu'])) {
                    $resourceSetting['action_menu'] = $defaultActionMenus['options'];
                }

                if (count($resourceSetting['action_menu']) == 1) {
                    $resourceSetting['action_menu'] = array_merge([
                        [
                            'label' => $l->translate('save'),
                            'value' => $moduleId != 'feed' ? (Phpfox::getParam('saveditems.open_popup_in_item_detail') ? 'saveditems/save_popup_detail_item' : 'saveditems/save_detail_item') : 'saveditems/save',
                            'acl' => 'can_save_item',
                            'show' => '!is_saved&&!is_pending'
                        ],
                        [
                            'label' => $l->translate('saveditems_unsave'),
                            'value' => $moduleId != 'feed' ? (Phpfox::getParam('saveditems.open_confirmation_in_item_detail') ? 'saveditems/unsave_confirmation_detail_item' : 'saveditems/unsave_detail_item') : 'saveditems/unsave_in_feed',
                            'acl' => 'can_save_item',
                            'show' => 'is_saved&&!is_pending'
                        ],
                    ], $resourceSetting['action_menu']);
                } else {
                    $lastAction = array_pop($resourceSetting['action_menu']);
                    $resourceSetting['action_menu'] = array_merge($resourceSetting['action_menu'], [
                        [
                            'label' => $l->translate('save'),
                            'value' => $moduleId != 'feed' ? (Phpfox::getParam('saveditems.open_popup_in_item_detail') ? 'saveditems/save_popup_detail_item' : 'saveditems/save_detail_item') : 'saveditems/save',
                            'acl' => 'can_save_item',
                            'show' => '!is_saved&&!is_pending'
                        ],
                        [
                            'label' => $l->translate('saveditems_unsave'),
                            'value' => $moduleId != 'feed' ? (Phpfox::getParam('saveditems.open_confirmation_in_item_detail') ? 'saveditems/unsave_confirmation_detail_item' : 'saveditems/unsave_detail_item') : 'saveditems/unsave_in_feed',
                            'acl' => 'can_save_item',
                            'show' => 'is_saved&&!is_pending'
                        ],
                        $lastAction,
                    ]);
                }
                $tempSources[$resourceName] = $resourceSetting;
            }
        }
        $settings[$moduleId]['setting']['resources'] = $tempSources;
    }
} 
 ";s:46:"mobile.service_core_api_site_settings_no_cache";s:2153:"if (Phpfox::isAppActive('P_SavedItems') && !empty($data['screen_setting']['saveditems'])) {
    $savedTypes = Phpfox::getService('saveditems')->getStatisticByType();
    $scrollEnable = false;
    $resourceName = \Apps\P_SavedItems\Api\Resource\SavedItemsResource::populate([])->getResourceName();
    $tabs = [
        [
            'label' => 'all',
            'component' => \Apps\Core_MobileApi\Adapter\MobileApp\ScreenSetting::SMART_RESOURCE_LIST,
            'module_name' => 'saveditems',
            'resource_name' => $resourceName,
            'item_template' => 'saveditems.saved-item',
            'search' => true,
            'use_query' => ['type' => 'all'],
            'scrollEnabled' => $scrollEnable,
        ]
    ];

    if (!empty($savedTypes)) {
        foreach ($savedTypes as $savedType) {
            $tabs[] = [
                'label' => $savedType['type_name'],
                'component' => \Apps\Core_MobileApi\Adapter\MobileApp\ScreenSetting::SMART_RESOURCE_LIST,
                'module_name' => 'saveditems',
                'resource_name' => $resourceName,
                'item_template' => 'saveditems.saved-item',
                'search' => true,
                'use_query' => ['type' => $savedType['type_id']],
                'scrollEnabled' => $scrollEnable,
            ];
        }
    }

    $tabsForCollection = [];
    foreach ($tabs as $tab) {
        $tabsForCollection[] = array_merge($tab, [
            'use_query' => [
                'type' => $tab['use_query']['type'],
                'collection_id' => ':id'
            ]
        ]);
    }

    $data['screen_setting']['saveditems']['moduleSaveditems']['content']['embedComponents'][] = [
        'component' => \Apps\P_SavedItems\Api\Resource\SavedItemsResource::SMART_TAB_BAR,
        'apiUrl' => 'saveitems/get-tab',
        'initialQuery' => [
            "type"=> "all"
        ],
    ];

    $data['screen_setting']['saveditems']['detailSaveditemsCollection']['content']['embedComponents'][] = [
        'component' => \Apps\Core_MobileApi\Adapter\MobileApp\ScreenSetting::SMART_TABS,
        'tabs' => $tabsForCollection,
    ];
} 
 ";s:36:"mobile.service_coreapi_mobilePhrases";s:583:"if (Phpfox::isAppActive('P_SavedItems')) {
    $phrases = [
        'by',
        'saveditems_collection_item',
        'saveditems_collection_items',
        'saveditems_create_new_collection_uc_first',
        'saveditems_oldest',
        'saveditems_unopened',
        'saveditems_opened',
        'saveditems_saved_to_title',
        'saveditems_number_collections',
        'saveditems_collections',
        'saveditems_latest'
    ];
    foreach ($phrases as $phrase) {
        if (!in_array($phrase, $phrasesList)) {
            $phrasesList[] = $phrase;
        }
    }
} 
 ";s:31:"mobile_api_routing_registration";s:1811:"if (Phpfox::isAppActive('P_SavedItems')) {
    /**
     * Define RestAPI services
     */

    $this->apiNames['mobile.saveditems_api'] = \Apps\P_SavedItems\Service\Api\SavedItemsApi::class;
    $this->apiNames['mobile.saveditems_collection_api'] = \Apps\P_SavedItems\Service\Api\SavedItemsCollectionApi::class;

    /**
     * Register Resource Name, This help auto generate routing for the resource
     * Note: resource name must be mapped correctly to resource api
     */

    $this->resourceNames[\Apps\P_SavedItems\Api\Resource\SavedItemsResource::RESOURCE_NAME] = 'mobile.saveditems_api';
    $this->resourceNames[\Apps\P_SavedItems\Api\Resource\SavedItemsCollectionResource::RESOURCE_NAME] = 'mobile.saveditems_collection_api';
} 
 /**
 * Define RestAPI services
 */

$this->apiNames['mobile.preaction_api'] = Apps\P_Reaction\Service\Api\PReactionApi::class;

/**
 * Register Resource Name, This help auto generate routing for the resource
 * Note: resource name must be mapped correctly to resource api
 */

$this->resourceNames[Apps\P_Reaction\Api\Resource\PReactionResource::RESOURCE_NAME] = 'mobile.preaction_api'; 
 /**
 * Define RestAPI services
 */

$this->apiNames['mobile.pstatusbg_collection_api'] = \Apps\P_StatusBg\Service\Api\PStatusBgCollectionApi::class;
$this->apiNames['mobile.pstatusbg_background_api'] = \Apps\P_StatusBg\Service\Api\PStatusBgBackgroundApi::class;

/**
 * Register Resource Name, This help auto generate routing for the resource
 * Note: resource name must be mapped correctly to resource api
 */

$this->resourceNames[\Apps\P_StatusBg\Api\Resource\PStatusBgCollectionResource::RESOURCE_NAME] = 'mobile.pstatusbg_collection_api';
$this->resourceNames[\Apps\P_StatusBg\Api\Resource\PStatusBgBackgroundResource::RESOURCE_NAME] = 'mobile.pstatusbg_background_api'; 
 ";s:18:"template_getheader";s:294:"if (Phpfox::getLib('request')->getRequests() == [
        'req1' => 'admincp',
        'req2' => 'app',
        'id' => 'P_SavedItems'
    ]) {
    Phpfox::getLib('url')->send('admincp.user.group.add',
        ['setting' => 1, 'hide_app' => 1, 'module' => 'saveditems', 'group_id' => 2]);
} 
 ";s:37:"mobile.service_core_api_site_settings";s:284:"if (Phpfox::isAppActive('P_Reaction')) {
    $reactions = (new Apps\P_Reaction\Service\Api\PReactionApi())->findAll(['is_get_array' => true]);
    $data['general']['preaction'] = $reactions;
} 
 if (Phpfox::isAppActive('P_StatusBg')) {
    $data['general']['pstatusbg'] = true;
} 
 ";s:34:"mobile.service_like_api_create_end";s:507:"if(Phpfox::isAppActive('P_Reaction')) {
    $reactions = [];
    if (!empty($like['most_reactions'])) {
        foreach ($like['most_reactions'] as $most_reaction) {
            $reactions[] = Apps\P_Reaction\Api\Resource\PReactionResource::populate($most_reaction)->displayShortFields()->toArray();
        }
    }
    $response['most_reactions'] = $reactions;
    $response['user_reacted'] = (new Apps\P_Reaction\Service\Api\PReactionApi())->getUserReacted($params['item_id'], $params['item_type']);
} 
 ";s:36:"mobile.service_like_api_create_start";s:327:"if(Phpfox::isAppActive('P_Reaction')) {
    $defaultLike = Phpfox::getService('preaction')->getDefaultLike();
    $reactionId = $this->request()->get('reaction_id', $defaultLike['id']);
    $result = Phpfox::getService('like.process')->add($params['item_type'], $params['item_id'], null, null, [], '', $reactionId, true);
} 
 ";s:34:"mobile.service_like_api_delete_end";s:405:"if(Phpfox::isAppActive('P_Reaction')) {
    $reactions = [];
    if (!empty($like['most_reactions'])) {
        foreach ($like['most_reactions'] as $most_reaction) {
            $reactions[] = Apps\P_Reaction\Api\Resource\PReactionResource::populate($most_reaction)->displayShortFields()->toArray();
        }
    }
    $response['most_reactions'] = $reactions;
    $response['user_reacted'] = null;
} 
 ";s:33:"mobile.service_like_api_get_likes";s:122:"if(Phpfox::isAppActive('P_Reaction')) {
    $like = $aFeed = Phpfox::getService('like')->getAll($itemType, $itemId);
} 
 ";s:47:"admincp.component_controller_index_process_menu";s:485:"if ($this->request()->get('req2') == 'pstatusbg' || $this->request()->get('id') == 'P_StatusBg') {
    $this->template()->setHeader([
        'css/admin.css' => 'app_p-status-background',
        'jscript/admin.js' => 'app_p-status-background'
    ])->setPhrase([
        'error',
        'notice',
        'collection_updated_successfully',
        'collection_added_successfully',
        'please_remove_all_error_files_first',
        'title_of_collection_is_required'
    ]);
} 
 ";s:41:"mobile.service_feed_api_create_status_end";s:410:"if (Phpfox::isAppActive('P_StatusBg') && !empty($values['parent_user_id'])) {
    if (!empty($id) && !empty($background)) {
        $statusId = $this->database()->select('item_id')->from(':feed')->where('feed_id = ' . (int)$id)->execute('getField');
        \Phpfox::getService('pstatusbg.process')->addBackgroundForStatus('feed_comment', $statusId, $background, $this->getUser()->getId(), 'feed');
    }
} 
 ";s:43:"mobile.service_feed_api_create_status_start";s:203:"if (Phpfox::isAppActive('P_StatusBg')) {
    $background = $this->request()->get('status_background_id');
    if (!empty($background)) {
        $values['status_background_id'] = $background;
    }
} 
 ";s:47:"mobile.service_feed_api_get_status_for_edit_end";s:362:"if (Phpfox::isAppActive('P_StatusBg')) {
    $typeId = $feed['type_id'];
    $itemId = $feed['item_id'];

    $statusBg = \Phpfox::getService('pstatusbg')->getFeedStatusBackground($feed['item_id'], $feed['type_id'], $feed['user_id'], true);
    if (!empty($statusBg)) {
        $item['item']['status_background_id'] = (int)$statusBg['background_id'];
    }
} 
 ";s:42:"mobile.service_feed_api_process_update_end";s:4809:"if (Phpfox::isAppActive('P_StatusBg') && $result) {
    $bgId = $this->request()->get('status_background_id');
    $ownerUserId = $this->getUser()->getId();
    $statusId = 0;
    $referenceFeed = [];
    if (!empty($values['parent_item_type']) && !empty($values['parent_item_id']) && !empty($callback)) {
        $feed = $this->database()->select('item_id, type_id, user_id')->from(":${callback['table_prefix']}feed")->where(['feed_id' => $id])->execute('getRow');
        $bgItemId = isset($feed['item_id']) ? $feed['item_id'] : 0;
        $bgItemType = isset($feed['type_id']) ? $feed['type_id'] : (isset($callback['feed_id']) ? $callback['feed_id'] : '');
        $ownerUserId = isset($feed['user_id']) ? $feed['user_id'] : $ownerUserId;
    } elseif (!empty($values['parent_user_id'])) {
        $feed = $this->database()->select('item_id, type_id, user_id, time_stamp')->from(':feed')->where(['feed_id' => $id])->execute('getRow');
        $bgItemId = isset($feed['item_id']) ? $feed['item_id'] : 0;
        $bgItemType = isset($feed['type_id']) ? $feed['type_id'] : 'feed_comment';
        $ownerUserId = isset($feed['user_id']) ? $feed['user_id'] : $ownerUserId;
        if (!empty($feed)) {
            $statusId = db()->select('item_id')->from(':feed')->where([
                'user_id' => $ownerUserId,
                'type_id' => 'user_status',
                'time_stamp' => $feed['time_stamp']
            ])->executeField();
        }
    } else {
        $feed = $this->database()->select('item_id, type_id, user_id, time_stamp')->from(':feed')->where(['feed_id' => $id])->execute('getRow');
        $bgItemId = isset($feed['item_id']) ? $feed['item_id'] : 0;
        $bgItemType = isset($feed['type_id']) ? $feed['type_id'] : 'user_status';
        $ownerUserId = isset($feed['user_id']) ? $feed['user_id'] : $ownerUserId;
        //Get feed on tag friend
        if (!empty($feed)) {
            $referenceFeed = db()->select('item_id')->from(':feed')->where([
                'user_id' => $ownerUserId,
                'type_id' => 'feed_comment',
                'time_stamp' => $feed['time_stamp']
            ])->executeRows();
        }
    }
    //Update background
    if ($bgItemId && $bgItemType) {
        $oldBackground = \Phpfox::getService('pstatusbg')->getFeedStatusBackground($bgItemId, $bgItemType, $ownerUserId, true);
        if (!empty($oldBackground)) {
            if ($bgId) {
                $this->database()->update(':pstatusbg_status_background', [
                    'background_id' => $bgId,
                    'time_stamp' => PHPFOX_TIME
                ], 'id =' . (int)$oldBackground['id']);
            } else {
                $this->database()->delete(':pstatusbg_status_background', ['id' => $oldBackground['id']]);
            }
        } else {
            \Phpfox::getService('pstatusbg.process')->addBackgroundForStatus($bgItemType, $bgItemId, $bgId, $ownerUserId, isset($values['parent_item_type']) ? $values['parent_item_type'] : 'user');
        }
    }

    if ($statusId) {
        $oldBackgroundStatus = \Phpfox::getService('pstatusbg')->getFeedStatusBackground($statusId, 'user_status', $ownerUserId, true);
        if (!empty($oldBackgroundStatus)) {
            if ($bgId) {
                $this->database()->update(':pstatusbg_status_background', [
                    'background_id' => $bgId,
                    'time_stamp' => PHPFOX_TIME
                ], 'id =' . (int)$oldBackgroundStatus['id']);
            } else {
                $this->database()->delete(':pstatusbg_status_background', ['id' => $oldBackgroundStatus['id']]);
            }
        } else {
            \Phpfox::getService('pstatusbg.process')->addBackgroundForStatus('user_status', $statusId, $bgId, $ownerUserId, isset($values['parent_item_type']) ? $values['parent_item_type'] : 'user');
        }
    }
    if (!empty($referenceFeed)) {
        foreach ($referenceFeed as $reference) {
            $oldRefer = \Phpfox::getService('pstatusbg')->getFeedStatusBackground($reference['item_id'], 'feed_comment', $ownerUserId, true);
            if (!empty($oldRefer)) {
                if ($bgId) {
                    $this->database()->update(':pstatusbg_status_background', [
                        'background_id' => $bgId,
                        'time_stamp' => PHPFOX_TIME
                    ], 'id =' . (int)$oldRefer['id']);
                } else {
                    $this->database()->delete(':pstatusbg_status_background', ['id' => $oldRefer['id']]);
                }
            } else {
                \Phpfox::getService('pstatusbg.process')->addBackgroundForStatus('feed_comment', $reference['item_id'], $bgId, $ownerUserId, isset($values['parent_item_type']) ? $values['parent_item_type'] : 'user');
            }
        }
    }
} 
 ";s:41:"user.service_process_add_updatestatus_end";s:267:"if (Phpfox::isAppActive('P_StatusBg') && $iStatusId && !empty($aVals['status_background_id'])) {
    Phpfox::getService('pstatusbg.process')->addBackgroundForStatus('user_status', $iStatusId,
        $aVals['status_background_id'], Phpfox::getUserId(), 'user');
} 
 ";s:27:"feed.service_feed_get_start";s:165:"if (defined('PHPFOX_IS_MOBILE_API_CALL') && PHPFOX_IS_MOBILE_API_CALL) {
    $extra .= Phpfox::getService('mobile.device')->getExtraConditions('feed.type_id');
} 
 ";s:38:"friend.service_request_process_add_end";s:297:"use Apps\Core_MobileApi\Adapter\PushNotification\PushNotificationInterface;

if (!empty($iFriendId)) {
    Phpfox::getService(PushNotificationInterface::class)->addToQueue(Phpfox::getUserId(), $iFriendId, [
        'notification_type' => 'friend',
        'notification_id'   => $iId
    ]);
} 
 ";s:24:"mail.service_process_add";s:662:"use Apps\Core_MobileApi\Adapter\PushNotification\PushNotificationInterface;

//Implement push notification
if (!$bIsThreadReply && Phpfox::getParam('mail.threaded_mail_conversation')) {
    $iUserId = $aVals['to'];
} else {
    foreach ($aThreadUsers as $aThreadUser) {
        if ($aThreadUser['user_id'] == Phpfox::getUserId()) {
            continue;
        }
        $iUserId = $aThreadUser['user_id'];
    }
}


Phpfox::getService(PushNotificationInterface::class)->addToQueue(Phpfox::getUserId(), $iUserId, [
    'message'           => $aVals['message'],
    'notification_type' => 'mail',
    'notification_id'   => isset($iTextId) ? $iTextId : 0
]); 
 ";s:36:"notification.service_process_add_end";s:333:"use Apps\Core_MobileApi\Adapter\PushNotification\PushNotificationInterface;

if ($aInsert) {
    Phpfox::getService(PushNotificationInterface::class)->addToQueue(($iSenderUserId === null ? Phpfox::getUserId() : $iSenderUserId), $iOwnerUserId, [
        'notification_id'   => $iId,
        'notification_type' => $sType
    ]);
} 
 ";s:9:"run_start";s:540:"/**
 * Auto login user
 */

if (Phpfox::isAppActive('Core_MobileApi')) {
    Phpfox_Module::instance()->addServiceNames((new Apps\Core_MobileApi\Service\NameResource())->getApiNames());
}
if (isset($_SERVER['x-access-token']) || isset($_SERVER['HTTP_X_ACCESS_TOKEN']) || isset($_REQUEST['token'])) {
    $token = ((isset($_SERVER['x-access-token']) ? $_SERVER['x-access-token'] : (isset($_REQUEST['token']))) ? $_REQUEST['token'] : $_SERVER['HTTP_X_ACCESS_TOKEN']);
    Phpfox::getService('mobile.auth_api')->setUserFromToken($token);
} 
 ";s:42:"user.component_controller_setting_settitle";s:837:"if (!empty($aGateways)) {
    foreach ($aGateways as $key => $gateway) {
        if ($gateway['gateway_id'] == 'paypal') {
            $mobileUserGateway = Phpfox::getService('api.gateway')->getUserGateways($aUser['user_id']);
            $userValue = '';
            if (isset($mobileUserGateway['paypal']) && !empty($mobileUserGateway['paypal']['gateway'])) {
                $userValue = isset($mobileUserGateway['paypal']['gateway']['merchant_id']) ? $mobileUserGateway['paypal']['gateway']['merchant_id'] : '';
            }
            $aGateways[$key]['custom']['merchant_id'] = [
                'phrase'      => _p('merchant_id'),
                'phrase_info' => _p('the_encrypted_id_of_your_paypal_account'),
                'value'       => '',
                'user_value'  => $userValue
            ];
        }
    }
} 
 ";s:30:"user.service_auth_handlestatus";s:747:"$mobileReq1 = \Phpfox_Request::instance()->get('req1');
$mobileReq2 = \Phpfox_Request::instance()->get('req2');
$mobileReq3 = \Phpfox_Request::instance()->get('req3');

if (($mobileReq1 == 'mobile' && $mobileReq2 == 'token') || ($mobileReq1 == 'restful_api' && in_array($mobileReq3, ['user', 'me']))) {
    if (
        (Phpfox::isUser() && Phpfox::getUserBy('status_id') == 1 && Phpfox::getParam('user.logout_after_change_email_if_verify') && !isset($bEmailVerification)) ||
        (Phpfox::getParam('core.enable_register_with_phone_number') && !isset($bPhoneVerification)) ||
        (Phpfox::isUser() && in_array(Phpfox::getUserBy('view_id'), [2, 1]))
    ) {
        $bEmailVerification = true;
        $bPhoneVerification = true;
    }
} 
 ";s:35:"user.service_process_updatepassword";s:911:"if (Phpfox::isAppActive('Core_MobileApi') && $bLogged) {
    $refreshToken = Phpfox::getLib('request')->get('user_refresh_token');
    $deviceToken = Phpfox::getLib('request')->get('user_device_token');
    $accessToken = Phpfox::getLib('request')->get('user_access_token');
    $isMobileApi = defined('PHPFOX_IS_MOBILE_API_CALL') && PHPFOX_IS_MOBILE_API_CALL;

    db()->delete(':mobile_api_device_token', 'user_id = ' . db()->escape($iUserId) . ($isMobileApi && $deviceToken ? ' AND token <> "' . db()->escape($deviceToken) . '"' : ''));
    db()->delete(':oauth_refresh_tokens', 'user_id = ' . db()->escape($iUserId) . ($isMobileApi && $refreshToken ? ' AND refresh_token <> "' . db()->escape($refreshToken) . '"' : ''));
    db()->delete(':oauth_access_tokens', 'user_id = ' . db()->escape($iUserId) . ($isMobileApi && $accessToken ? ' AND access_token <> "' . db()->escape($accessToken) . '"' : ''));
} 
 ";s:33:"validator.admincp_settings_mobile";s:202:"$aValidation = [
    'mobile_limit_menu_show_first' => [
        'def'   => 'int',
        'min'   => '0',
        'title' => _p('how_many_menus_show_first_must_be_greater_or_equal_to_0'),
    ],
]; 
 ";s:27:"friend.service_friend_get_2";s:280:"if (Phpfox::isUser()) {
    $aRows[$iKey]['is_blocked'] = Phpfox::getService('user.block')->isBlocked($aRow['user_id'], Phpfox::getUserId());
}

if (!isset($aUser['is_featured'])) {
    $aRows[$iKey]['is_featured'] = Phpfox::getService('user')->isFeatured($aRow['user_id']);
} 
 ";s:21:"get_module_blocks_end";s:349:"if ($iId == 6) {
    array_splice($aBlocks[$iId], 1, 0, [['type_id' => 0, 'component' => 'core.template-breadcrumbmenu', 'params' => []]]);
} else if ($iId == 1 && Phpfox::getLib('module')->getFullControllerName() == 'search.index') {
    array_unshift($aBlocks[$iId], ['type_id' => 0, 'component' => 'core.template-menusub', 'params' => []]);
} 
 ";s:24:"groups.block_photo_menus";s:80:"echo Phpfox::getLib('template')->getBuiltFile('core.block.actions-buttons'); 
 ";s:23:"pages.block_photo_menus";s:80:"echo Phpfox::getLib('template')->getBuiltFile('core.block.actions-buttons'); 
 ";s:51:"profile.component_controller_statistics_process_end";s:452:"$aIcons = [];
foreach ($aModules as $sModuleId => $aModule) {
    foreach ($aModule as $sPhrase => $sLink) {
        if (function_exists('materialParseIcon')) {
            $aIcons[$sPhrase] = materialParseIcon($sModuleId);
        }
    }
}
$this->template()->assign([
    'aIcons'      => $aIcons,
    'iTotalItems' => $aActivites[_p('total_items')]
]);
unset($aActivites[_p('total_items')]);
$this->template()->assign('aActivites', $aActivites); 
 ";s:45:"search.component_controller_index_process_end";s:305:"if (isset($aMenus)) {
    $aFilterMenusIcons = [
        _p('all_results') => materialParseIcon('all_results')
    ];
    foreach ($aMenus as $sKey => $aMenu) {
        $aFilterMenusIcons[$aMenu['name']] = materialParseIcon($sKey);
    }

    $this->template()->assign(compact('aFilterMenusIcons'));
} 
 ";s:38:"template_template_getmenu_process_menu";s:343:"if ($sConnection == 'main') {
    if (function_exists('materialParseMobileIcon') && !empty($aMenus[$iKey]['module'])) {
        $aMenus[$iKey]['mobile_icon'] = materialParseMobileIcon($aMenus[$iKey]['mobile_icon']);
    }

    if (!empty($aMenus[$iKey]['is_selected'])) {
        $this->assign('aMainSelectedMenu', $aMenus[$iKey]);
    }
} 
 ";s:32:"user.service_privacy_privacy_get";s:297:"foreach ($aItems as $sModule => $aSettings) {
    foreach ($aSettings as $sKey => $aItem) {
        if (!isset($aItems[$sModule][$sKey]['icon_class']) && function_exists('materialParseIcon')) {
            $aItems[$sModule][$sKey]['icon_class'] = materialParseIcon($sModule);
        }
    }
} 
 ";s:37:"validator.admincp_settings_attachment";s:185:"$aValidation['attachment_item_limit'] = [
    'def' => 'int:required',
    'min' => '1',
    'title' => _p('item_limit_must_be_greater_than_or_equal_to_number', ['number' => 1]),
]; 
 ";s:27:"forum.template_block_post_1";s:4:" 
 ";s:31:"validator.admincp_settings_core";s:1834:"$aValidation['auto_deny_items'] = [
    'def' => 'int:required',
    'min' => '2',
    'title' => _p('"SPAM Count" must be greater than 1'),
];


$aValidation['cookie_path'] = [
    'def'=> 'required',
    'title'=> 'Cookie path is required field',
];

$aValidation['auto_ban_spammer'] = [
    'def'=> 'int',
    'min' => '0',
    'title'=> '"Auto Ban Spammers" must be greater than or equal to 0',
];

$aValidation['auto_clear_cache'] = [
    'def'=> 'int',
    'min' => '0',
    'title'=> '"Auto clear system cache" must be greater than or equal to 0',
];

$aValidation['force_https_secure_pages'] = [
    'def'=> 'required',
    'requirements' => [
        'callback' => 'validation_check_valid_ssl'
    ],
    'title'=> 'Your server does not support https',
];

$aValidation['max_character_length_for_description_meta'] = [
    'def'=> 'int',
    'min' => '0',
    'title'=> '"Max Length For Description Meta Tag" must be greater than or equal to 0',
];

$aValidation['max_character_length_for_title_meta'] = [
    'def'=> 'int',
    'min' => '0',
    'title'=> '"Max Length For Title Meta Tag" must be greater than or equal to 0',
];

if (!function_exists('validation_check_valid_ssl')) {
    function validation_check_valid_ssl($value)
    {
        if ($value == false) {
            return true;
        }
        $sUrl = Phpfox::getLib('url')->makeUrl('');
        $sUrl = str_replace('http://', 'https://', $sUrl);

        $ch = curl_init($sUrl);
        curl_setopt($ch, CURLOPT_HEADER, true);
        curl_setopt($ch, CURLOPT_NOBODY, true);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
        curl_setopt($ch, CURLOPT_TIMEOUT,10);
        $output = curl_exec($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        return ($http_code == 200) ? true : false;
    }
} 
 ";s:40:"validator.admincp_settings_group_general";s:200:"$aValidation['min_character_to_search'] = [
    'def' => 'int:required',
    'min' => 1,
    'title' => _p('global_search_minimum_character_validation_messages', [
        'number' => 1,
    ])
]; 
 ";s:37:"validator.admincp_settings_group_mail";s:211:"$aValidation['mail_from_name'] = [
    'def' => 'required',
    'title' => _p('"Name" is required')
];
$aValidation['email_from_email'] = [
    'def' => 'required',
    'title' => _p('"From" is required')
]; 
 ";s:31:"validator.admincp_settings_feed";s:152:"$aValidation['feed_display_limit'] = [
    'def' => 'int:required',
    'min' => '1',
    'title' => 'Feed display limit must be greater than 0',
]; 
 ";s:36:"validator.admincp_user_settings_feed";s:103:"$aValidation['feed_sponsor_price'] = [
    'def' => 'integer',
    'title' => 'Name is required'
]; 
 ";s:33:"validator.admincp_settings_friend";s:339:"$aValidation['friend_display_limit'] = [
    'def' => 'int:required',
    'min' => '1',
    'title' => 'Friend display limit must be greater than 0',
];
$aValidation['friend_suggestion_search_total'] = [
    'def' => 'int:required',
    'min' => '1',
    'title' => '"Friends Suggestion Friends Check Count" must be greater than 0',
]; 
 ";s:38:"validator.admincp_user_settings_friend";s:198:"$aValidation = [
    'total_folders' => [
        'def' => 'int:required',
        'min' => 0,
        'title' => _p('allowed_total_friend_folders_must_be_greater_than_or_equals_to_0'),
    ]
]; 
 ";s:33:"validator.admincp_settings_invite";s:368:"$aValidation = [
    'pendings_to_show_per_page'=>[
        'def' => 'int:required',
        'min' => '1',
        'title' => _p('"How Many Pendings To Show" must be greater than 0'),
    ],
    'invite_expire'=>[
        'def' => 'int:required',
        'min' => '0',
        'title' => _p('"Expire invites timeout" must be greater than or equal to 0'),
    ],
]; 
 ";s:39:"validator.admincp_settings_notification";s:353:"$aValidation['notify_ajax_refresh'] = [
    'def' => 'int:required',
    'min' => '1',
    'title' => _p('"Site Wide Notification AJAX Refresh" must be greater than 0'),
];
$aValidation['total_notification_title_length'] = [
    'def' => 'int:required',
    'min' => '11',
    'title' => _p('"Notification Title Length" must be greater than 10'),
]; 
 ";s:30:"validator.admincp_settings_tag";s:199:"defined('PHPFOX') or exit('NO DICE!');

$aValidation['tag_trend_total_display'] = [
    'def' => 'int:required',
    'min' => '1',
    'title' => 'Total tag to display must be greater than 0',
]; 
 ";s:31:"validator.admincp_settings_user";s:1962:"defined('PHPFOX') or exit('NO DICE!');

$aValidation['date_of_birth_start'] = [
    'def' => 'int:required',
    'min' => '1900',
    'max' => '2017',
    'title' => '"Date of Birth (Start)" the range is accepted: 1900 -> 2017',
];
$aValidation['date_of_birth_end'] = [
    'def' => 'int:required',
    'min' => '1900',
    'max' => '2017',
    'requirements'=>[
        'min'=> '$date_of_birth_start',
    ],
    'title' => '"Date of Birth (End)" the range is accepted: 1900 -> 2017, and large than "Date of Birth (Start)"',
];
$aValidation['maximum_length_for_full_name'] = [
    'def' => 'int:required',
    'min' => '5',
    'requirements'=>[
        'min'=> '$min_length_for_username',
    ],
    'title' => '"Maximum Length for Full Name" must be greater than 4 and large than "Minimum Length for Username"',
];
$aValidation['min_length_for_username'] = [
    'def' => 'int:required',
    'min' => '1',
    'title' => '"Minimum Length for Username" must be greater than 0.',
];
$aValidation['max_length_for_username'] = [
    'def' => 'int:required',
    'min' => '1',
    'requirements'=>[
        'min'=> '$min_length_for_username',
    ],
    'title' => '"Maximum Length for Username" must be greater than "Minimum Length for Username"',
];

$aValidation['check_status_updates'] = [
    'def' => 'int',
    'min' => '0',
    'title' => _p('"Spam Check Status Updates" be greater than or equal to 0'),
];
$aValidation['resend_verification_email_delay_time'] = [
    'def' => 'int',
    'min' => '0',
    'title' => _p('resend_verification_email_delay_time_must_be_more_than_or_equal_to_0'),
];

$aValidation['days_for_delete_pending_user_verification'] = [
    'def'=> 'int',
    'min' => '0',
    'title'=> _p('setting_days_for_delete_pending_user_verification_validation'),
];

$aValidation['delay_time_for_next_promotion'] = [
    'def' => 'int:required',
    'min' => '1',
    'title' => _p('setting_delay_time_for_next_promotion_validation'),
]; 
 ";s:36:"validator.admincp_user_settings_user";s:1226:"defined('PHPFOX') or exit('NO DICE!');

$aValidation['total_times_can_change_user_name'] = [
    'def' => 'int',
    'min' => '0',
    'title' => '"How many times can this user group edit their user name" must be greater than or equal to 0',
];
$aValidation['total_times_can_change_own_full_name'] = [
    'def' => 'int',
    'min' => '0',
    'title' => '"How many times can members of this user group change their full name?" must be greater than or equal to 0',
];
$aValidation['points_user_signup'] = [
    'def' => 'int',
    'min' => '0',
    'title' => '"Get activity points when user sign up" must be greater than or equal to 0',
];
$aValidation['points_user_accesssite'] = [
    'def' => 'int',
    'min' => '0',
    'title' => '"Get activity points when user access to site" must be greater than or equal to 0',
];
$aValidation['points_user_uploadprofilephoto'] = [
    'def' => 'int',
    'min' => '0',
    'title' => '"Get activity points when user uploaded profile photos" must be greater than or equal to 0',
];
$aValidation['points_user_uploadcoverphoto'] = [
    'def' => 'int',
    'min' => '0',
    'title' => '"Get activity points when user uploaded cover photos" must be greater than or equal to 0',
]; 
 ";}s:1:"g";a:0:{}s:1:"e";O:8:"DateTime":3:{s:4:"date";s:26:"2022-03-05 12:30:16.851537";s:13:"timezone_type";i:3;s:8:"timezone";s:3:"GMT";}s:1:"m";N;s:1:"c";N;}